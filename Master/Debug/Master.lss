
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  000037a0  00003834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080013a  0080013a  0000390e  2**0
                  ALLOC
  3 .stab         00003b70  00000000  00000000  00003910  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001923  00000000  00000000  00007480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009092  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000de2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__vector_10>
      2c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 34       	cpi	r26, 0x42	; 66
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 13 	call	0x2694	; 0x2694 <main>
      8a:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e0       	ldi	r26, 0x0F	; 15
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e0       	ldi	r24, 0x0F	; 15
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e0       	ldi	r22, 0x0F	; 15
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMER0_voidInit>:

static void (*TIMER0_OFFunc)(void)= NULL;
static void (*TIMER0_CTCFunc)(void)= NULL;

void TIMER0_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
		//enable compare match flag
		SET_BIT(TIMSK,OCIE0);		
		// set compare match value
		OCR0=CTCvalue;
	#elif TIMER0_Mode == 4			// fast PWM
		SET_BIT(TCCR0,WGM00);
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
     cb4:	a3 e5       	ldi	r26, 0x53	; 83
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e3 e5       	ldi	r30, 0x53	; 83
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	8c 93       	st	X, r24
		
		CLR_BIT(TCCR0,COM00);		// set on top clear on comp
     cc2:	a3 e5       	ldi	r26, 0x53	; 83
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e3 e5       	ldi	r30, 0x53	; 83
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);	
     cd0:	a3 e5       	ldi	r26, 0x53	; 83
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e3 e5       	ldi	r30, 0x53	; 83
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 62       	ori	r24, 0x20	; 32
     cdc:	8c 93       	st	X, r24
	#elif TIMER0_Prescaler == 8
		CLR_BIT(TCCR0,CS02);
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	#elif TIMER0_Prescaler == 64
		CLR_BIT(TCCR0,CS02);
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8b 7f       	andi	r24, 0xFB	; 251
     cea:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS00);
     cfa:	a3 e5       	ldi	r26, 0x53	; 83
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e5       	ldi	r30, 0x53	; 83
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS02);
		SET_BIT(TCCR0,CS01);
		SET_BIT(TCCR0,CS00);
	#endif
	
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <TIMER0_SetDuty>:

void TIMER0_SetDuty(u8 u8_dutycycle)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	0f 92       	push	r0
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	89 83       	std	Y+1, r24	; 0x01

	OCR0 =  u8_dutycycle;
     d1a:	ec e5       	ldi	r30, 0x5C	; 92
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	80 83       	st	Z, r24
}
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <TIMER0_voidOFSetCallBack>:


void TIMER0_voidOFSetCallBack(void(*Func)(void))
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <TIMER0_voidOFSetCallBack+0x6>
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	9a 83       	std	Y+2, r25	; 0x02
     d36:	89 83       	std	Y+1, r24	; 0x01
	if(Func != NULL)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	31 f0       	breq	.+12     	; 0xd4c <TIMER0_voidOFSetCallBack+0x22>
	{
		TIMER0_OFFunc=Func;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	90 93 3b 01 	sts	0x013B, r25
     d48:	80 93 3a 01 	sts	0x013A, r24
	}
	else
	{
		
	}
}
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <TIMER0_voidCTCSetCallBack>:


void TIMER0_voidCTCSetCallBack(void(*Func)(void))
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <TIMER0_voidCTCSetCallBack+0x6>
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
	if(Func != NULL)
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	31 f0       	breq	.+12     	; 0xd78 <TIMER0_voidCTCSetCallBack+0x22>
	{
		TIMER0_CTCFunc=Func;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	90 93 3d 01 	sts	0x013D, r25
     d74:	80 93 3c 01 	sts	0x013C, r24
	}
	else
	{
		
	}
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <__vector_11>:


void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	if ( TIMER0_OFFunc != NULL)
     dac:	80 91 3a 01 	lds	r24, 0x013A
     db0:	90 91 3b 01 	lds	r25, 0x013B
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	29 f0       	breq	.+10     	; 0xdc2 <__vector_11+0x40>
	{
		TIMER0_OFFunc();
     db8:	e0 91 3a 01 	lds	r30, 0x013A
     dbc:	f0 91 3b 01 	lds	r31, 0x013B
     dc0:	09 95       	icall
	}
	else
	{
		
	}
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__vector_10>:


void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	if ( TIMER0_CTCFunc != NULL)
     e12:	80 91 3c 01 	lds	r24, 0x013C
     e16:	90 91 3d 01 	lds	r25, 0x013D
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	29 f0       	breq	.+10     	; 0xe28 <__vector_10+0x40>
	{
		TIMER0_CTCFunc();
     e1e:	e0 91 3c 01 	lds	r30, 0x013C
     e22:	f0 91 3d 01 	lds	r31, 0x013D
     e26:	09 95       	icall
	}
	else
	{
		
	}
}
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <SPI_voidInitMaster>:
#include"SPI_register.h"



void SPI_voidInitMaster(void)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	/*Master initialization*/
	SET_BIT(SPCR,SPCR_MSTR);
     e56:	ad e2       	ldi	r26, 0x2D	; 45
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ed e2       	ldi	r30, 0x2D	; 45
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	80 61       	ori	r24, 0x10	; 16
     e62:	8c 93       	st	X, r24

	/*clock prescasler :divided by 16*/
	SET_BIT(SPCR,SPCR_SPR0);
     e64:	ad e2       	ldi	r26, 0x2D	; 45
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ed e2       	ldi	r30, 0x2D	; 45
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
     e72:	ad e2       	ldi	r26, 0x2D	; 45
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ed e2       	ldi	r30, 0x2D	; 45
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8d 7f       	andi	r24, 0xFD	; 253
     e7e:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
     e80:	ae e2       	ldi	r26, 0x2E	; 46
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ee e2       	ldi	r30, 0x2E	; 46
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8e 7f       	andi	r24, 0xFE	; 254
     e8c:	8c 93       	st	X, r24

	/*SPI ENABLE*/
	SET_BIT(SPCR,SPCR_SPE);
     e8e:	ad e2       	ldi	r26, 0x2D	; 45
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ed e2       	ldi	r30, 0x2D	; 45
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 64       	ori	r24, 0x40	; 64
     e9a:	8c 93       	st	X, r24

}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <SPI_voidInitSlave>:


void SPI_voidInitSlave(void)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	/*Slave initialization*/
	CLR_BIT(SPCR,SPCR_MSTR);
     eaa:	ad e2       	ldi	r26, 0x2D	; 45
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ed e2       	ldi	r30, 0x2D	; 45
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7e       	andi	r24, 0xEF	; 239
     eb6:	8c 93       	st	X, r24

	/*SPI ENABLE*/
	SET_BIT(SPCR,SPCR_SPE);
     eb8:	ad e2       	ldi	r26, 0x2D	; 45
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ed e2       	ldi	r30, 0x2D	; 45
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 64       	ori	r24, 0x40	; 64
     ec4:	8c 93       	st	X, r24

}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <SPI_u8Transceive>:


u8  SPI_u8Transceive(u8 Copy_u8Data)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	89 83       	std	Y+1, r24	; 0x01
/*send the data*/
SPDR=Copy_u8Data;
     ed8:	ef e2       	ldi	r30, 0x2F	; 47
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	80 83       	st	Z, r24

/*wait (busy waiting) until transfer is completed*/
while(GET_BIT(SPSR,SPSR_SPIF)==0);
     ee0:	ee e2       	ldi	r30, 0x2E	; 46
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	dc f7       	brge	.-10     	; 0xee0 <SPI_u8Transceive+0x14>

/*Get the data*/
return SPDR;
     eea:	ef e2       	ldi	r30, 0x2F	; 47
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z


}
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <I2C_SetMaster>:

#ifndef I2C_PROGRAM_C_
#define I2C_PROGRAM_C_

void I2C_SetMaster(void)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x07;
     f00:	e0 e2       	ldi	r30, 0x20	; 32
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	87 e0       	ldi	r24, 0x07	; 7
     f06:	80 83       	st	Z, r24
	TWSR &= ~((1<<TWPS1) | (1<<TWPS0));
     f08:	a1 e2       	ldi	r26, 0x21	; 33
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e1 e2       	ldi	r30, 0x21	; 33
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8c 7f       	andi	r24, 0xFC	; 252
     f14:	8c 93       	st	X, r24
	TWCR = (1<<TWEN);
     f16:	e6 e5       	ldi	r30, 0x56	; 86
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	80 83       	st	Z, r24
	return;
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <I2C_SetSlave>:

void I2C_SetSlave(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	TWAR = (1<<1);
     f2c:	e2 e2       	ldi	r30, 0x22	; 34
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);
     f34:	e6 e5       	ldi	r30, 0x56	; 86
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	84 e0       	ldi	r24, 0x04	; 4
     f3a:	80 83       	st	Z, r24
	return;
}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <I2C_Start>:

void I2C_Start(void)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f4a:	e6 e5       	ldi	r30, 0x56	; 86
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	84 ea       	ldi	r24, 0xA4	; 164
     f50:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
     f52:	e6 e5       	ldi	r30, 0x56	; 86
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	88 23       	and	r24, r24
     f5a:	dc f7       	brge	.-10     	; 0xf52 <I2C_Start+0x10>
	while ((TWSR & 0xF8) != START_ACK);
     f5c:	e1 e2       	ldi	r30, 0x21	; 33
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 7f       	andi	r24, 0xF8	; 248
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	88 30       	cpi	r24, 0x08	; 8
     f6c:	91 05       	cpc	r25, r1
     f6e:	b1 f7       	brne	.-20     	; 0xf5c <I2C_Start+0x1a>
	return;
}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <I2C_RepeatedStart>:

void I2C_RepeatedStart(void)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f7e:	e6 e5       	ldi	r30, 0x56	; 86
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	84 ea       	ldi	r24, 0xA4	; 164
     f84:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
     f86:	e6 e5       	ldi	r30, 0x56	; 86
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	88 23       	and	r24, r24
     f8e:	dc f7       	brge	.-10     	; 0xf86 <I2C_RepeatedStart+0x10>
	while ((TWSR & 0xF8) != REP_START_ACK);
     f90:	e1 e2       	ldi	r30, 0x21	; 33
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 7f       	andi	r24, 0xF8	; 248
     f9c:	90 70       	andi	r25, 0x00	; 0
     f9e:	80 31       	cpi	r24, 0x10	; 16
     fa0:	91 05       	cpc	r25, r1
     fa2:	b1 f7       	brne	.-20     	; 0xf90 <I2C_RepeatedStart+0x1a>
	return;
}
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <I2C_SendSlaveAddressWithWriteReq>:

void I2C_SendSlaveAddressWithWriteReq(u8 Saddress)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	0f 92       	push	r0
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (Saddress<<1);
     fb6:	e3 e2       	ldi	r30, 0x23	; 35
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	88 0f       	add	r24, r24
     fbe:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     fc0:	e6 e5       	ldi	r30, 0x56	; 86
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	84 e8       	ldi	r24, 0x84	; 132
     fc6:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	88 23       	and	r24, r24
     fd0:	dc f7       	brge	.-10     	; 0xfc8 <I2C_SendSlaveAddressWithWriteReq+0x1e>
	while ((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK);
     fd2:	e1 e2       	ldi	r30, 0x21	; 33
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	88 7f       	andi	r24, 0xF8	; 248
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	88 31       	cpi	r24, 0x18	; 24
     fe2:	91 05       	cpc	r25, r1
     fe4:	b1 f7       	brne	.-20     	; 0xfd2 <I2C_SendSlaveAddressWithWriteReq+0x28>
	return;
}
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <I2C_SendSlaveAddressWithReadReq>:

void I2C_SendSlaveAddressWithReadReq(u8 Saddress)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (Saddress<<1);
     ffa:	e3 e2       	ldi	r30, 0x23	; 35
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	88 0f       	add	r24, r24
    1002:	80 83       	st	Z, r24
	TWDR |= (1<<0);
    1004:	a3 e2       	ldi	r26, 0x23	; 35
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e3 e2       	ldi	r30, 0x23	; 35
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1012:	e6 e5       	ldi	r30, 0x56	; 86
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	84 e8       	ldi	r24, 0x84	; 132
    1018:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
    101a:	e6 e5       	ldi	r30, 0x56	; 86
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	dc f7       	brge	.-10     	; 0x101a <I2C_SendSlaveAddressWithReadReq+0x2c>
	while ((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK);
    1024:	e1 e2       	ldi	r30, 0x21	; 33
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	88 7f       	andi	r24, 0xF8	; 248
    1030:	90 70       	andi	r25, 0x00	; 0
    1032:	80 34       	cpi	r24, 0x40	; 64
    1034:	91 05       	cpc	r25, r1
    1036:	b1 f7       	brne	.-20     	; 0x1024 <I2C_SendSlaveAddressWithReadReq+0x36>
}
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <I2C_WriteByte>:

void I2C_WriteByte(u8 byte)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte;
    104c:	e3 e2       	ldi	r30, 0x23	; 35
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1054:	e6 e5       	ldi	r30, 0x56	; 86
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	84 e8       	ldi	r24, 0x84	; 132
    105a:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
    105c:	e6 e5       	ldi	r30, 0x56	; 86
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 23       	and	r24, r24
    1064:	dc f7       	brge	.-10     	; 0x105c <I2C_WriteByte+0x1c>
	while ((TWSR & 0xF8) != WR_BYTE_ACK);
    1066:	e1 e2       	ldi	r30, 0x21	; 33
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	88 7f       	andi	r24, 0xF8	; 248
    1072:	90 70       	andi	r25, 0x00	; 0
    1074:	88 32       	cpi	r24, 0x28	; 40
    1076:	91 05       	cpc	r25, r1
    1078:	b1 f7       	brne	.-20     	; 0x1066 <I2C_WriteByte+0x26>
	return;
}
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <I2C_ReadByte>:

u8 I2C_ReadByte(void)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
    108a:	e6 e5       	ldi	r30, 0x56	; 86
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	84 e8       	ldi	r24, 0x84	; 132
    1090:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
    1092:	e6 e5       	ldi	r30, 0x56	; 86
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 23       	and	r24, r24
    109a:	dc f7       	brge	.-10     	; 0x1092 <I2C_ReadByte+0x10>
	while ((TWSR & 0xF8) != RD_BYTE_ACK);
    109c:	e1 e2       	ldi	r30, 0x21	; 33
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	88 7f       	andi	r24, 0xF8	; 248
    10a8:	90 70       	andi	r25, 0x00	; 0
    10aa:	88 35       	cpi	r24, 0x58	; 88
    10ac:	91 05       	cpc	r25, r1
    10ae:	b1 f7       	brne	.-20     	; 0x109c <I2C_ReadByte+0x1a>
	return TWDR;
    10b0:	e3 e2       	ldi	r30, 0x23	; 35
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
}
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <I2C_Stop>:

void I2C_Stop(void)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    10c4:	e6 e5       	ldi	r30, 0x56	; 86
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	84 e9       	ldi	r24, 0x94	; 148
    10ca:	80 83       	st	Z, r24
	return;
}
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <I2C_CheckSlaveAddressReceivedWithWriteReq>:

void I2C_CheckSlaveAddressReceivedWithWriteReq(void)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    10da:	e6 e5       	ldi	r30, 0x56	; 86
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	84 ec       	ldi	r24, 0xC4	; 196
    10e0:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
    10e2:	e6 e5       	ldi	r30, 0x56	; 86
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 23       	and	r24, r24
    10ea:	dc f7       	brge	.-10     	; 0x10e2 <I2C_CheckSlaveAddressReceivedWithWriteReq+0x10>
	while ((TWSR & 0xF8) != SLAVE_ADD_RCVD_WR_REQ);
    10ec:	e1 e2       	ldi	r30, 0x21	; 33
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	88 7f       	andi	r24, 0xF8	; 248
    10f8:	90 70       	andi	r25, 0x00	; 0
    10fa:	80 36       	cpi	r24, 0x60	; 96
    10fc:	91 05       	cpc	r25, r1
    10fe:	b1 f7       	brne	.-20     	; 0x10ec <I2C_CheckSlaveAddressReceivedWithWriteReq+0x1a>
	return;
}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <I2C_CheckSlaveAddressReceivedWithReadReq>:

void I2C_CheckSlaveAddressReceivedWithReadReq(void)
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	84 ec       	ldi	r24, 0xC4	; 196
    1114:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	dc f7       	brge	.-10     	; 0x1116 <I2C_CheckSlaveAddressReceivedWithReadReq+0x10>
	while ((TWSR & 0xF8) != SLAVE_ADD_RCVD_RD_REQ);
    1120:	e1 e2       	ldi	r30, 0x21	; 33
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	88 7f       	andi	r24, 0xF8	; 248
    112c:	90 70       	andi	r25, 0x00	; 0
    112e:	88 3a       	cpi	r24, 0xA8	; 168
    1130:	91 05       	cpc	r25, r1
    1132:	b1 f7       	brne	.-20     	; 0x1120 <I2C_CheckSlaveAddressReceivedWithReadReq+0x1a>
	return;
}
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <I2C_SlaveReadByte>:

u8 I2C_SlaveReadByte(void)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1142:	e6 e5       	ldi	r30, 0x56	; 86
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	84 ec       	ldi	r24, 0xC4	; 196
    1148:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
    114a:	e6 e5       	ldi	r30, 0x56	; 86
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	88 23       	and	r24, r24
    1152:	dc f7       	brge	.-10     	; 0x114a <I2C_SlaveReadByte+0x10>
	while ((TWSR & 0xF8) != SLAVE_DATA_RECEIVED);
    1154:	e1 e2       	ldi	r30, 0x21	; 33
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	88 7f       	andi	r24, 0xF8	; 248
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	80 38       	cpi	r24, 0x80	; 128
    1164:	91 05       	cpc	r25, r1
    1166:	b1 f7       	brne	.-20     	; 0x1154 <I2C_SlaveReadByte+0x1a>
	return TWDR;
    1168:	e3 e2       	ldi	r30, 0x23	; 35
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
}
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <EEpromInit>:


//2c02

void EEpromInit(void)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	I2C_SetMaster();
    117c:	0e 94 7c 07 	call	0xef8	; 0xef8 <I2C_SetMaster>
}
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <EEpromWriteByte>:



void EEpromWriteByte(u16 address, u8 data)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <EEpromWriteByte+0x6>
    118c:	0f 92       	push	r0
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	6b 83       	std	Y+3, r22	; 0x03
	I2C_Start();
    1198:	0e 94 a1 07 	call	0xf42	; 0xf42 <I2C_Start>
	I2C_SendSlaveAddressWithWriteReq( 0b01010000 /*| ((address & 0x0700)>>8) */);
    119c:	80 e5       	ldi	r24, 0x50	; 80
    119e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <I2C_SendSlaveAddressWithWriteReq>
	I2C_WriteByte((u8)address);
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	0e 94 20 08 	call	0x1040	; 0x1040 <I2C_WriteByte>
	I2C_WriteByte(data);
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	0e 94 20 08 	call	0x1040	; 0x1040 <I2C_WriteByte>
	I2C_Stop();
    11ae:	0e 94 5e 08 	call	0x10bc	; 0x10bc <I2C_Stop>
    return;
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <EEpromReadByte>:



u8 EEpromReadByte(u16 address)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <EEpromReadByte+0x6>
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	9b 83       	std	Y+3, r25	; 0x03
    11cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 data;
	I2C_Start();
    11ce:	0e 94 a1 07 	call	0xf42	; 0xf42 <I2C_Start>
	I2C_SendSlaveAddressWithWriteReq( 0b01010000 /*| ((address & 0x07)>>8) */);
    11d2:	80 e5       	ldi	r24, 0x50	; 80
    11d4:	0e 94 d5 07 	call	0xfaa	; 0xfaa <I2C_SendSlaveAddressWithWriteReq>
	I2C_WriteByte((u8)address);
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	0e 94 20 08 	call	0x1040	; 0x1040 <I2C_WriteByte>
	I2C_RepeatedStart();
    11de:	0e 94 bb 07 	call	0xf76	; 0xf76 <I2C_RepeatedStart>
	I2C_SendSlaveAddressWithReadReq( 0b01010000 /*| ((address & 0x07)>>8)*/ );
    11e2:	80 e5       	ldi	r24, 0x50	; 80
    11e4:	0e 94 f7 07 	call	0xfee	; 0xfee <I2C_SendSlaveAddressWithReadReq>
	data = I2C_ReadByte();
    11e8:	0e 94 41 08 	call	0x1082	; 0x1082 <I2C_ReadByte>
    11ec:	89 83       	std	Y+1, r24	; 0x01
	I2C_Stop();
    11ee:	0e 94 5e 08 	call	0x10bc	; 0x10bc <I2C_Stop>
    return data;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <DIO_SetPinDirection>:
#include "DIO_INTERFACE.h"



void DIO_SetPinDirection(u8 Port , u8 Pin , u8 Direction)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <DIO_SetPinDirection+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <DIO_SetPinDirection+0x8>
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6a 83       	std	Y+2, r22	; 0x02
    1212:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3d 83       	std	Y+5, r19	; 0x05
    121c:	2c 83       	std	Y+4, r18	; 0x04
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	91 05       	cpc	r25, r1
    1226:	09 f4       	brne	.+2      	; 0x122a <DIO_SetPinDirection+0x2a>
    1228:	47 c0       	rjmp	.+142    	; 0x12b8 <DIO_SetPinDirection+0xb8>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	2c f4       	brge	.+10     	; 0x123e <DIO_SetPinDirection+0x3e>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	71 f0       	breq	.+28     	; 0x1258 <DIO_SetPinDirection+0x58>
    123c:	cb c0       	rjmp	.+406    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
    123e:	2c 81       	ldd	r18, Y+4	; 0x04
    1240:	3d 81       	ldd	r19, Y+5	; 0x05
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <DIO_SetPinDirection+0x4a>
    1248:	67 c0       	rjmp	.+206    	; 0x1318 <DIO_SetPinDirection+0x118>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <DIO_SetPinDirection+0x56>
    1254:	91 c0       	rjmp	.+290    	; 0x1378 <DIO_SetPinDirection+0x178>
    1256:	be c0       	rjmp	.+380    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
	{
		case DIO_PORTA: 
		if(Direction == DIO_INPUT) 
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 23       	and	r24, r24
    125c:	a9 f4       	brne	.+42     	; 0x1288 <DIO_SetPinDirection+0x88>
		{ 
			CLR_BIT(DDRA_REG,Pin);
    125e:	aa e3       	ldi	r26, 0x3A	; 58
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ea e3       	ldi	r30, 0x3A	; 58
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_SetPinDirection+0x7c>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_SetPinDirection+0x78>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	a6 c0       	rjmp	.+332    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	09 f0       	breq	.+2      	; 0x1290 <DIO_SetPinDirection+0x90>
    128e:	a2 c0       	rjmp	.+324    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRA_REG,Pin);
    1290:	aa e3       	ldi	r26, 0x3A	; 58
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ea e3       	ldi	r30, 0x3A	; 58
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_SetPinDirection+0xae>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_SetPinDirection+0xaa>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	8e c0       	rjmp	.+284    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Direction == DIO_INPUT) 
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 23       	and	r24, r24
    12bc:	a9 f4       	brne	.+42     	; 0x12e8 <DIO_SetPinDirection+0xe8>
		{ 
			CLR_BIT(DDRB_REG,Pin);
    12be:	a7 e3       	ldi	r26, 0x37	; 55
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e7 e3       	ldi	r30, 0x37	; 55
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <DIO_SetPinDirection+0xdc>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <DIO_SetPinDirection+0xd8>
    12e0:	80 95       	com	r24
    12e2:	84 23       	and	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	76 c0       	rjmp	.+236    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <DIO_SetPinDirection+0xf0>
    12ee:	72 c0       	rjmp	.+228    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRB_REG,Pin);
    12f0:	a7 e3       	ldi	r26, 0x37	; 55
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e7 e3       	ldi	r30, 0x37	; 55
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_SetPinDirection+0x10e>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_SetPinDirection+0x10a>
    1312:	84 2b       	or	r24, r20
    1314:	8c 93       	st	X, r24
    1316:	5e c0       	rjmp	.+188    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Direction == DIO_INPUT) 
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	88 23       	and	r24, r24
    131c:	a9 f4       	brne	.+42     	; 0x1348 <DIO_SetPinDirection+0x148>
		{ 
			CLR_BIT(DDRC_REG,Pin);
    131e:	a4 e3       	ldi	r26, 0x34	; 52
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e4 e3       	ldi	r30, 0x34	; 52
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_SetPinDirection+0x13c>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_SetPinDirection+0x138>
    1340:	80 95       	com	r24
    1342:	84 23       	and	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	46 c0       	rjmp	.+140    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	09 f0       	breq	.+2      	; 0x1350 <DIO_SetPinDirection+0x150>
    134e:	42 c0       	rjmp	.+132    	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRC_REG,Pin);
    1350:	a4 e3       	ldi	r26, 0x34	; 52
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e4 e3       	ldi	r30, 0x34	; 52
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_SetPinDirection+0x16e>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_SetPinDirection+0x16a>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	2e c0       	rjmp	.+92     	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Direction == DIO_INPUT) 
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 23       	and	r24, r24
    137c:	a9 f4       	brne	.+42     	; 0x13a8 <DIO_SetPinDirection+0x1a8>
		{ 
			CLR_BIT(DDRD_REG,Pin);
    137e:	a1 e3       	ldi	r26, 0x31	; 49
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e1 e3       	ldi	r30, 0x31	; 49
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_SetPinDirection+0x19c>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_SetPinDirection+0x198>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	16 c0       	rjmp	.+44     	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	99 f4       	brne	.+38     	; 0x13d4 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRD_REG,Pin);
    13ae:	a1 e3       	ldi	r26, 0x31	; 49
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e1 e3       	ldi	r30, 0x31	; 49
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_SetPinDirection+0x1cc>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_SetPinDirection+0x1c8>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Direction not valid "
		break;
	}
	
}
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <DIO_SetPinValue>:
void DIO_SetPinValue    (u8 Port , u8 Pin , u8 Value )
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <DIO_SetPinValue+0x6>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <DIO_SetPinValue+0x8>
    13ec:	0f 92       	push	r0
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	6a 83       	std	Y+2, r22	; 0x02
    13f6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3d 83       	std	Y+5, r19	; 0x05
    1400:	2c 83       	std	Y+4, r18	; 0x04
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <DIO_SetPinValue+0x2a>
    140c:	47 c0       	rjmp	.+142    	; 0x149c <DIO_SetPinValue+0xb8>
    140e:	2c 81       	ldd	r18, Y+4	; 0x04
    1410:	3d 81       	ldd	r19, Y+5	; 0x05
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	2c f4       	brge	.+10     	; 0x1422 <DIO_SetPinValue+0x3e>
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	9d 81       	ldd	r25, Y+5	; 0x05
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	71 f0       	breq	.+28     	; 0x143c <DIO_SetPinValue+0x58>
    1420:	cb c0       	rjmp	.+406    	; 0x15b8 <DIO_SetPinValue+0x1d4>
    1422:	2c 81       	ldd	r18, Y+4	; 0x04
    1424:	3d 81       	ldd	r19, Y+5	; 0x05
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <DIO_SetPinValue+0x4a>
    142c:	67 c0       	rjmp	.+206    	; 0x14fc <DIO_SetPinValue+0x118>
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <DIO_SetPinValue+0x56>
    1438:	91 c0       	rjmp	.+290    	; 0x155c <DIO_SetPinValue+0x178>
    143a:	be c0       	rjmp	.+380    	; 0x15b8 <DIO_SetPinValue+0x1d4>
	{
		case DIO_PORTA: 
		if(Value == DIO_HIGH)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	a1 f4       	brne	.+40     	; 0x146a <DIO_SetPinValue+0x86>
		{ 
			SET_BIT(PORTA_REG,Pin);
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_SetPinValue+0x7c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_SetPinValue+0x78>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	a7 c0       	rjmp	.+334    	; 0x15b8 <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 23       	and	r24, r24
    146e:	09 f0       	breq	.+2      	; 0x1472 <DIO_SetPinValue+0x8e>
    1470:	a3 c0       	rjmp	.+326    	; 0x15b8 <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTA_REG,Pin);
    1472:	ab e3       	ldi	r26, 0x3B	; 59
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	eb e3       	ldi	r30, 0x3B	; 59
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_SetPinValue+0xac>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_SetPinValue+0xa8>
    1494:	80 95       	com	r24
    1496:	84 23       	and	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	8e c0       	rjmp	.+284    	; 0x15b8 <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Value == DIO_HIGH)
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	a1 f4       	brne	.+40     	; 0x14ca <DIO_SetPinValue+0xe6>
		{ 
			SET_BIT(PORTB_REG,Pin);
    14a2:	a8 e3       	ldi	r26, 0x38	; 56
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e8 e3       	ldi	r30, 0x38	; 56
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_SetPinValue+0xdc>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_SetPinValue+0xd8>
    14c4:	84 2b       	or	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	77 c0       	rjmp	.+238    	; 0x15b8 <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 23       	and	r24, r24
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <DIO_SetPinValue+0xee>
    14d0:	73 c0       	rjmp	.+230    	; 0x15b8 <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTB_REG,Pin);
    14d2:	a8 e3       	ldi	r26, 0x38	; 56
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e8 e3       	ldi	r30, 0x38	; 56
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_SetPinValue+0x10c>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_SetPinValue+0x108>
    14f4:	80 95       	com	r24
    14f6:	84 23       	and	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	5e c0       	rjmp	.+188    	; 0x15b8 <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Value == DIO_HIGH)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	a1 f4       	brne	.+40     	; 0x152a <DIO_SetPinValue+0x146>
		{ 
			SET_BIT(PORTC_REG,Pin);
    1502:	a5 e3       	ldi	r26, 0x35	; 53
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e3       	ldi	r30, 0x35	; 53
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_SetPinValue+0x13c>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_SetPinValue+0x138>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	47 c0       	rjmp	.+142    	; 0x15b8 <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	88 23       	and	r24, r24
    152e:	09 f0       	breq	.+2      	; 0x1532 <DIO_SetPinValue+0x14e>
    1530:	43 c0       	rjmp	.+134    	; 0x15b8 <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTC_REG,Pin);
    1532:	a5 e3       	ldi	r26, 0x35	; 53
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e5 e3       	ldi	r30, 0x35	; 53
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_SetPinValue+0x16c>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_SetPinValue+0x168>
    1554:	80 95       	com	r24
    1556:	84 23       	and	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	2e c0       	rjmp	.+92     	; 0x15b8 <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Value == DIO_HIGH)
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	a1 f4       	brne	.+40     	; 0x158a <DIO_SetPinValue+0x1a6>
		{ 
			SET_BIT(PORTD_REG,Pin);
    1562:	a2 e3       	ldi	r26, 0x32	; 50
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_SetPinValue+0x19c>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_SetPinValue+0x198>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	17 c0       	rjmp	.+46     	; 0x15b8 <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	88 23       	and	r24, r24
    158e:	a1 f4       	brne	.+40     	; 0x15b8 <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTD_REG,Pin);
    1590:	a2 e3       	ldi	r26, 0x32	; 50
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e2 e3       	ldi	r30, 0x32	; 50
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_SetPinValue+0x1ca>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_SetPinValue+0x1c6>
    15b2:	80 95       	com	r24
    15b4:	84 23       	and	r24, r20
    15b6:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Value not valid "
		break;
	}
	
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <DIO_GetPinValue>:

u8   DIO_GetPinValue    (u8 Port , u8 Pin )
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <DIO_GetPinValue+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <DIO_GetPinValue+0x8>
    15d0:	0f 92       	push	r0
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value;
	switch(Port)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3d 83       	std	Y+5, r19	; 0x05
    15e2:	2c 83       	std	Y+4, r18	; 0x04
    15e4:	4c 81       	ldd	r20, Y+4	; 0x04
    15e6:	5d 81       	ldd	r21, Y+5	; 0x05
    15e8:	41 30       	cpi	r20, 0x01	; 1
    15ea:	51 05       	cpc	r21, r1
    15ec:	41 f1       	breq	.+80     	; 0x163e <DIO_GetPinValue+0x76>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	82 30       	cpi	r24, 0x02	; 2
    15f4:	91 05       	cpc	r25, r1
    15f6:	34 f4       	brge	.+12     	; 0x1604 <DIO_GetPinValue+0x3c>
    15f8:	2c 81       	ldd	r18, Y+4	; 0x04
    15fa:	3d 81       	ldd	r19, Y+5	; 0x05
    15fc:	21 15       	cp	r18, r1
    15fe:	31 05       	cpc	r19, r1
    1600:	61 f0       	breq	.+24     	; 0x161a <DIO_GetPinValue+0x52>
    1602:	52 c0       	rjmp	.+164    	; 0x16a8 <DIO_GetPinValue+0xe0>
    1604:	4c 81       	ldd	r20, Y+4	; 0x04
    1606:	5d 81       	ldd	r21, Y+5	; 0x05
    1608:	42 30       	cpi	r20, 0x02	; 2
    160a:	51 05       	cpc	r21, r1
    160c:	51 f1       	breq	.+84     	; 0x1662 <DIO_GetPinValue+0x9a>
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	b9 f1       	breq	.+110    	; 0x1686 <DIO_GetPinValue+0xbe>
    1618:	47 c0       	rjmp	.+142    	; 0x16a8 <DIO_GetPinValue+0xe0>
	{
		case DIO_PORTA: Value = GET_BIT(PINA_REG,Pin); break;
    161a:	e9 e3       	ldi	r30, 0x39	; 57
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a9 01       	movw	r20, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_GetPinValue+0x6a>
    162e:	55 95       	asr	r21
    1630:	47 95       	ror	r20
    1632:	8a 95       	dec	r24
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_GetPinValue+0x66>
    1636:	ca 01       	movw	r24, r20
    1638:	81 70       	andi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	35 c0       	rjmp	.+106    	; 0x16a8 <DIO_GetPinValue+0xe0>
		case DIO_PORTB: Value = GET_BIT(PINB_REG,Pin); break;
    163e:	e6 e3       	ldi	r30, 0x36	; 54
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a9 01       	movw	r20, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_GetPinValue+0x8e>
    1652:	55 95       	asr	r21
    1654:	47 95       	ror	r20
    1656:	8a 95       	dec	r24
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_GetPinValue+0x8a>
    165a:	ca 01       	movw	r24, r20
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	23 c0       	rjmp	.+70     	; 0x16a8 <DIO_GetPinValue+0xe0>
		case DIO_PORTC: Value = GET_BIT(PINC_REG,Pin); break;
    1662:	e3 e3       	ldi	r30, 0x33	; 51
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a9 01       	movw	r20, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_GetPinValue+0xb2>
    1676:	55 95       	asr	r21
    1678:	47 95       	ror	r20
    167a:	8a 95       	dec	r24
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_GetPinValue+0xae>
    167e:	ca 01       	movw	r24, r20
    1680:	81 70       	andi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	11 c0       	rjmp	.+34     	; 0x16a8 <DIO_GetPinValue+0xe0>
		case DIO_PORTD: Value = GET_BIT(PIND_REG,Pin); break;
    1686:	e0 e3       	ldi	r30, 0x30	; 48
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_GetPinValue+0xd6>
    169a:	55 95       	asr	r21
    169c:	47 95       	ror	r20
    169e:	8a 95       	dec	r24
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_GetPinValue+0xd2>
    16a2:	ca 01       	movw	r24, r20
    16a4:	81 70       	andi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01
		default:
		break;
	}
	return Value;
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 Port , u8 Direction)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <DIO_SetPortDirection+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <DIO_SetPortDirection+0x8>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3c 83       	std	Y+4, r19	; 0x04
    16d2:	2b 83       	std	Y+3, r18	; 0x03
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	d1 f0       	breq	.+52     	; 0x1712 <DIO_SetPortDirection+0x58>
    16de:	2b 81       	ldd	r18, Y+3	; 0x03
    16e0:	3c 81       	ldd	r19, Y+4	; 0x04
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <DIO_SetPortDirection+0x38>
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	61 f0       	breq	.+24     	; 0x1708 <DIO_SetPortDirection+0x4e>
    16f0:	1e c0       	rjmp	.+60     	; 0x172e <DIO_SetPortDirection+0x74>
    16f2:	2b 81       	ldd	r18, Y+3	; 0x03
    16f4:	3c 81       	ldd	r19, Y+4	; 0x04
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	81 f0       	breq	.+32     	; 0x171c <DIO_SetPortDirection+0x62>
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	81 f0       	breq	.+32     	; 0x1726 <DIO_SetPortDirection+0x6c>
    1706:	13 c0       	rjmp	.+38     	; 0x172e <DIO_SetPortDirection+0x74>
	{
		case DIO_PORTA: DDRA_REG = Direction; break;
    1708:	ea e3       	ldi	r30, 0x3A	; 58
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 83       	st	Z, r24
    1710:	0e c0       	rjmp	.+28     	; 0x172e <DIO_SetPortDirection+0x74>
		case DIO_PORTB: DDRB_REG = Direction; break;
    1712:	e7 e3       	ldi	r30, 0x37	; 55
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	80 83       	st	Z, r24
    171a:	09 c0       	rjmp	.+18     	; 0x172e <DIO_SetPortDirection+0x74>
		case DIO_PORTC: DDRC_REG = Direction; break;
    171c:	e4 e3       	ldi	r30, 0x34	; 52
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	80 83       	st	Z, r24
    1724:	04 c0       	rjmp	.+8      	; 0x172e <DIO_SetPortDirection+0x74>
		case DIO_PORTD: DDRD_REG = Direction; break;
    1726:	e1 e3       	ldi	r30, 0x31	; 49
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	80 83       	st	Z, r24
		default:
		break;
	}
}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <DIO_SetPortValue>:


void DIO_SetPortValue    (u8 Port , u8 PORT_Value   )
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <DIO_SetPortValue+0x6>
    1742:	00 d0       	rcall	.+0      	; 0x1744 <DIO_SetPortValue+0x8>
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	3c 83       	std	Y+4, r19	; 0x04
    1754:	2b 83       	std	Y+3, r18	; 0x03
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	91 05       	cpc	r25, r1
    175e:	d1 f0       	breq	.+52     	; 0x1794 <DIO_SetPortValue+0x58>
    1760:	2b 81       	ldd	r18, Y+3	; 0x03
    1762:	3c 81       	ldd	r19, Y+4	; 0x04
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	2c f4       	brge	.+10     	; 0x1774 <DIO_SetPortValue+0x38>
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	61 f0       	breq	.+24     	; 0x178a <DIO_SetPortValue+0x4e>
    1772:	1e c0       	rjmp	.+60     	; 0x17b0 <DIO_SetPortValue+0x74>
    1774:	2b 81       	ldd	r18, Y+3	; 0x03
    1776:	3c 81       	ldd	r19, Y+4	; 0x04
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	81 f0       	breq	.+32     	; 0x179e <DIO_SetPortValue+0x62>
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	91 05       	cpc	r25, r1
    1786:	81 f0       	breq	.+32     	; 0x17a8 <DIO_SetPortValue+0x6c>
    1788:	13 c0       	rjmp	.+38     	; 0x17b0 <DIO_SetPortValue+0x74>
	{
		case DIO_PORTA: PORTA_REG = PORT_Value; break;
    178a:	eb e3       	ldi	r30, 0x3B	; 59
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	80 83       	st	Z, r24
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <DIO_SetPortValue+0x74>
		case DIO_PORTB: PORTB_REG = PORT_Value; break;
    1794:	e8 e3       	ldi	r30, 0x38	; 56
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	80 83       	st	Z, r24
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <DIO_SetPortValue+0x74>
		case DIO_PORTC: PORTC_REG = PORT_Value; break;
    179e:	e5 e3       	ldi	r30, 0x35	; 53
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	80 83       	st	Z, r24
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <DIO_SetPortValue+0x74>
		case DIO_PORTD: PORTD_REG = PORT_Value; break;
    17a8:	e2 e3       	ldi	r30, 0x32	; 50
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	80 83       	st	Z, r24
		default:
		break;
	}
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <ADC_voidInit>:
#include "ADC_CONFIG.h"
#include "ADC_PRIVATE.h"
#include "ADC_INTERFACE.h"

void ADC_voidInit(void)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
	//select avcc as ref voltage
	SET_BIT(ADMUX,REFS0);
    17c6:	a7 e2       	ldi	r26, 0x27	; 39
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e7 e2       	ldi	r30, 0x27	; 39
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 64       	ori	r24, 0x40	; 64
    17d2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    17d4:	a7 e2       	ldi	r26, 0x27	; 39
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e7 e2       	ldi	r30, 0x27	; 39
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8f 77       	andi	r24, 0x7F	; 127
    17e0:	8c 93       	st	X, r24
	
	// active lift adjust - 8 bit resolution
	SET_BIT(ADMUX,ADLAR);
    17e2:	a7 e2       	ldi	r26, 0x27	; 39
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e7 e2       	ldi	r30, 0x27	; 39
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 62       	ori	r24, 0x20	; 32
    17ee:	8c 93       	st	X, r24
	
	// Enable ADC
	SET_BIT(ADCSRA,ADEN);
    17f0:	a6 e2       	ldi	r26, 0x26	; 38
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e6 e2       	ldi	r30, 0x26	; 38
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 68       	ori	r24, 0x80	; 128
    17fc:	8c 93       	st	X, r24
	#elif ADC_Prescaler == 4
		CLR_BIT(ADCSRA,ADPS0);
		SET_BIT(ADCSRA,ADPS1);
		CLR_BIT(ADCSRA,ADPS2);
	#elif ADC_Prescaler == 8
		CLR_BIT(ADCSRA,ADPS0);
    17fe:	a6 e2       	ldi	r26, 0x26	; 38
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e6 e2       	ldi	r30, 0x26	; 38
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8e 7f       	andi	r24, 0xFE	; 254
    180a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    180c:	a6 e2       	ldi	r26, 0x26	; 38
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e6 e2       	ldi	r30, 0x26	; 38
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    181a:	a6 e2       	ldi	r26, 0x26	; 38
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e6 e2       	ldi	r30, 0x26	; 38
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	84 60       	ori	r24, 0x04	; 4
    1826:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS0);
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#endif
	
}
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <ADC_u8Start>:
u8 ADC_u8Start(u8 ADC_CHANNEL)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
	//Set channel
	ADMUX |= ADC_CHANNEL;
    183a:	a7 e2       	ldi	r26, 0x27	; 39
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e7 e2       	ldi	r30, 0x27	; 39
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	90 81       	ld	r25, Z
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	89 2b       	or	r24, r25
    1848:	8c 93       	st	X, r24
	
	// start conversion
	SET_BIT(ADCSRA,ADSC);
    184a:	a6 e2       	ldi	r26, 0x26	; 38
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e6 e2       	ldi	r30, 0x26	; 38
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 64       	ori	r24, 0x40	; 64
    1856:	8c 93       	st	X, r24
	
	while ((GET_BIT(ADCSRA,ADIF))==0);
    1858:	e6 e2       	ldi	r30, 0x26	; 38
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	82 95       	swap	r24
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	90 70       	andi	r25, 0x00	; 0
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	a9 f3       	breq	.-22     	; 0x1858 <ADC_u8Start+0x2a>
	
		SET_BIT(ADCSRA,ADIF);
    186e:	a6 e2       	ldi	r26, 0x26	; 38
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e6 e2       	ldi	r30, 0x26	; 38
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	80 61       	ori	r24, 0x10	; 16
    187a:	8c 93       	st	X, r24

	return ADCH;
    187c:	e5 e2       	ldi	r30, 0x25	; 37
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
}
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <ADC_u16GetSyncReading>:

u16  ADC_u16GetSyncReading(u8 ADC_Channel)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	27 97       	sbiw	r28, 0x07	; 7
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u8Counter=0;
    18a0:	19 82       	std	Y+1, r1	; 0x01
    18a2:	1a 82       	std	Y+2, r1	; 0x02
    18a4:	1b 82       	std	Y+3, r1	; 0x03
    18a6:	1c 82       	std	Y+4, r1	; 0x04
	//Avoiding Error in Channel Number
	ADMUX &= 0b11100000 ;
    18a8:	a7 e2       	ldi	r26, 0x27	; 39
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e7 e2       	ldi	r30, 0x27	; 39
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 7e       	andi	r24, 0xE0	; 224
    18b4:	8c 93       	st	X, r24
	ADMUX |= ADC_Channel ;
    18b6:	a7 e2       	ldi	r26, 0x27	; 39
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e7 e2       	ldi	r30, 0x27	; 39
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	90 81       	ld	r25, Z
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	89 2b       	or	r24, r25
    18c4:	8c 93       	st	X, r24
	//START Conversion
	ADCSRA |= (1<<ADSC);
    18c6:	a6 e2       	ldi	r26, 0x26	; 38
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e6 e2       	ldi	r30, 0x26	; 38
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 64       	ori	r24, 0x40	; 64
    18d2:	8c 93       	st	X, r24
    18d4:	0b c0       	rjmp	.+22     	; 0x18ec <ADC_u16GetSyncReading+0x62>
	//Wait Until Conversion Done
	while  (	(GET_BIT(ADCSRA,ADIF)	==	0)	&& (Local_u8Counter	 <	50000) )
	{
		Local_u8Counter++ ;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	ab 81       	ldd	r26, Y+3	; 0x03
    18dc:	bc 81       	ldd	r27, Y+4	; 0x04
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	a1 1d       	adc	r26, r1
    18e2:	b1 1d       	adc	r27, r1
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	ab 83       	std	Y+3, r26	; 0x03
    18ea:	bc 83       	std	Y+4, r27	; 0x04
	ADMUX &= 0b11100000 ;
	ADMUX |= ADC_Channel ;
	//START Conversion
	ADCSRA |= (1<<ADSC);
	//Wait Until Conversion Done
	while  (	(GET_BIT(ADCSRA,ADIF)	==	0)	&& (Local_u8Counter	 <	50000) )
    18ec:	e6 e2       	ldi	r30, 0x26	; 38
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	82 95       	swap	r24
    18f4:	8f 70       	andi	r24, 0x0F	; 15
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	81 70       	andi	r24, 0x01	; 1
    18fc:	90 70       	andi	r25, 0x00	; 0
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	61 f4       	brne	.+24     	; 0x191a <ADC_u16GetSyncReading+0x90>
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	ab 81       	ldd	r26, Y+3	; 0x03
    1908:	bc 81       	ldd	r27, Y+4	; 0x04
    190a:	80 35       	cpi	r24, 0x50	; 80
    190c:	23 ec       	ldi	r18, 0xC3	; 195
    190e:	92 07       	cpc	r25, r18
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	a2 07       	cpc	r26, r18
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	b2 07       	cpc	r27, r18
    1918:	f0 f2       	brcs	.-68     	; 0x18d6 <ADC_u16GetSyncReading+0x4c>
	{
		Local_u8Counter++ ;
	}
	if (GET_BIT(ADCSRA,ADIF)	==	1)
    191a:	e6 e2       	ldi	r30, 0x26	; 38
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	82 95       	swap	r24
    1922:	8f 70       	andi	r24, 0x0F	; 15
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	81 70       	andi	r24, 0x01	; 1
    192a:	90 70       	andi	r25, 0x00	; 0
    192c:	88 23       	and	r24, r24
    192e:	71 f0       	breq	.+28     	; 0x194c <ADC_u16GetSyncReading+0xc2>
	{
		//SET Flag again
		SET_BIT(ADCSRA,ADIF);
    1930:	a6 e2       	ldi	r26, 0x26	; 38
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e6 e2       	ldi	r30, 0x26	; 38
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 61       	ori	r24, 0x10	; 16
    193c:	8c 93       	st	X, r24
		//Store Data
		return ADC;
    193e:	e4 e2       	ldi	r30, 0x24	; 36
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	9f 83       	std	Y+7, r25	; 0x07
    1948:	8e 83       	std	Y+6, r24	; 0x06
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <ADC_u16GetSyncReading+0xce>
	else
	{
		//Do Nothing
	}
	//Store Data
	return ADC;
    194c:	e4 e2       	ldi	r30, 0x24	; 36
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	9f 83       	std	Y+7, r25	; 0x07
    1956:	8e 83       	std	Y+6, r24	; 0x06
    1958:	8e 81       	ldd	r24, Y+6	; 0x06
    195a:	9f 81       	ldd	r25, Y+7	; 0x07

}
    195c:	27 96       	adiw	r28, 0x07	; 7
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <LCD_WriteCommand>:
#include "LCD_INTERFACE.h"
#include <avr/delay.h>
#define f_cpu 8000000

extern void LCD_WriteCommand (u8 command)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	2f 97       	sbiw	r28, 0x0f	; 15
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	8f 87       	std	Y+15, r24	; 0x0f
	//RW=0
	DIO_SetPinValue (control_port,RW,DIO_LOW);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
		//RS=0
		DIO_SetPinValue (control_port,RS,DIO_LOW);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
		//Data
		DIO_SetPortValue (data_port,command);
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	6f 85       	ldd	r22, Y+15	; 0x0f
    199c:	0e 94 9e 0b 	call	0x173c	; 0x173c <DIO_SetPortValue>
		//start execution E=1
		DIO_SetPinValue(control_port,E,DIO_HIGH);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a0 e0       	ldi	r26, 0x00	; 0
    19b0:	b0 e4       	ldi	r27, 0x40	; 64
    19b2:	8b 87       	std	Y+11, r24	; 0x0b
    19b4:	9c 87       	std	Y+12, r25	; 0x0c
    19b6:	ad 87       	std	Y+13, r26	; 0x0d
    19b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	54 e4       	ldi	r21, 0x44	; 68
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8f 83       	std	Y+7, r24	; 0x07
    19d4:	98 87       	std	Y+8, r25	; 0x08
    19d6:	a9 87       	std	Y+9, r26	; 0x09
    19d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	2c f4       	brge	.+10     	; 0x19fc <LCD_WriteCommand+0x8e>
		__ticks = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	3f c0       	rjmp	.+126    	; 0x1a7a <LCD_WriteCommand+0x10c>
	else if (__tmp > 65535)
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	57 e4       	ldi	r21, 0x47	; 71
    1a0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	4c f5       	brge	.+82     	; 0x1a66 <LCD_WriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <LCD_WriteCommand+0xee>
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_WriteCommand+0xdc>
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <LCD_WriteCommand+0xd0>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <LCD_WriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_WriteCommand+0x118>
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_SetPinValue(control_port,E,DIO_LOW);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	62 e0       	ldi	r22, 0x02	; 2
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>

}
    1a98:	2f 96       	adiw	r28, 0x0f	; 15
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <LCD_WriteData>:
extern void LCD_WriteData (u8 data)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	2f 97       	sbiw	r28, 0x0f	; 15
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	8f 87       	std	Y+15, r24	; 0x0f
	//RW=0
	DIO_SetPinValue (control_port,RW,DIO_LOW);
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	61 e0       	ldi	r22, 0x01	; 1
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
	//RS=0
	DIO_SetPinValue (control_port,RS,DIO_HIGH);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
	//Data
	DIO_SetPortValue (data_port,data);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ad8:	0e 94 9e 0b 	call	0x173c	; 0x173c <DIO_SetPortValue>
	//start execution E=1
	DIO_SetPinValue(control_port,E,DIO_HIGH);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	62 e0       	ldi	r22, 0x02	; 2
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e0       	ldi	r26, 0x00	; 0
    1aec:	b0 e4       	ldi	r27, 0x40	; 64
    1aee:	8b 87       	std	Y+11, r24	; 0x0b
    1af0:	9c 87       	std	Y+12, r25	; 0x0c
    1af2:	ad 87       	std	Y+13, r26	; 0x0d
    1af4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a ef       	ldi	r20, 0xFA	; 250
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8f 83       	std	Y+7, r24	; 0x07
    1b10:	98 87       	std	Y+8, r25	; 0x08
    1b12:	a9 87       	std	Y+9, r26	; 0x09
    1b14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <LCD_WriteData+0x8e>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <LCD_WriteData+0x10c>
	else if (__tmp > 65535)
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <LCD_WriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <LCD_WriteData+0xee>
    1b7a:	88 ec       	ldi	r24, 0xC8	; 200
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9c 83       	std	Y+4, r25	; 0x04
    1b80:	8b 83       	std	Y+3, r24	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_WriteData+0xdc>
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <LCD_WriteData+0xd0>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <LCD_WriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba4:	78 85       	ldd	r23, Y+8	; 0x08
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_WriteData+0x118>
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(control_port,E,DIO_LOW);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
}
    1bd4:	2f 96       	adiw	r28, 0x0f	; 15
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <LCD_Init>:
extern void LCD_Init (void)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	aa 97       	sbiw	r28, 0x2a	; 42
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(control_port,RS,DIO_OUTPUT);
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	41 e0       	ldi	r20, 0x01	; 1
    1c00:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
	DIO_SetPinDirection(control_port,RW ,DIO_OUTPUT);
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	41 e0       	ldi	r20, 0x01	; 1
    1c0a:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
	DIO_SetPinDirection(control_port,E,DIO_OUTPUT);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
	DIO_SetPortDirection(data_port,0b11111111);
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	6f ef       	ldi	r22, 0xFF	; 255
    1c1c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <DIO_SetPortDirection>
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a8 e4       	ldi	r26, 0x48	; 72
    1c26:	b2 e4       	ldi	r27, 0x42	; 66
    1c28:	8f a3       	std	Y+39, r24	; 0x27
    1c2a:	98 a7       	std	Y+40, r25	; 0x28
    1c2c:	a9 a7       	std	Y+41, r26	; 0x29
    1c2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	6f a1       	ldd	r22, Y+39	; 0x27
    1c32:	78 a5       	ldd	r23, Y+40	; 0x28
    1c34:	89 a5       	ldd	r24, Y+41	; 0x29
    1c36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a ef       	ldi	r20, 0xFA	; 250
    1c3e:	54 e4       	ldi	r21, 0x44	; 68
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8b a3       	std	Y+35, r24	; 0x23
    1c4a:	9c a3       	std	Y+36, r25	; 0x24
    1c4c:	ad a3       	std	Y+37, r26	; 0x25
    1c4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c50:	6b a1       	ldd	r22, Y+35	; 0x23
    1c52:	7c a1       	ldd	r23, Y+36	; 0x24
    1c54:	8d a1       	ldd	r24, Y+37	; 0x25
    1c56:	9e a1       	ldd	r25, Y+38	; 0x26
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	2c f4       	brge	.+10     	; 0x1c72 <LCD_Init+0x8c>
		__ticks = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9a a3       	std	Y+34, r25	; 0x22
    1c6e:	89 a3       	std	Y+33, r24	; 0x21
    1c70:	3f c0       	rjmp	.+126    	; 0x1cf0 <LCD_Init+0x10a>
	else if (__tmp > 65535)
    1c72:	6b a1       	ldd	r22, Y+35	; 0x23
    1c74:	7c a1       	ldd	r23, Y+36	; 0x24
    1c76:	8d a1       	ldd	r24, Y+37	; 0x25
    1c78:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	4c f5       	brge	.+82     	; 0x1cdc <LCD_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e2       	ldi	r20, 0x20	; 32
    1c98:	51 e4       	ldi	r21, 0x41	; 65
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9a a3       	std	Y+34, r25	; 0x22
    1cb0:	89 a3       	std	Y+33, r24	; 0x21
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <LCD_Init+0xec>
    1cb4:	88 ec       	ldi	r24, 0xC8	; 200
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	98 a3       	std	Y+32, r25	; 0x20
    1cba:	8f 8f       	std	Y+31, r24	; 0x1f
    1cbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cbe:	98 a1       	ldd	r25, Y+32	; 0x20
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <LCD_Init+0xda>
    1cc4:	98 a3       	std	Y+32, r25	; 0x20
    1cc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	9a a3       	std	Y+34, r25	; 0x22
    1cd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <LCD_Init+0xce>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <LCD_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cde:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9a a3       	std	Y+34, r25	; 0x22
    1cee:	89 a3       	std	Y+33, r24	; 0x21
    1cf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf4:	9e 8f       	std	Y+30, r25	; 0x1e
    1cf6:	8d 8f       	std	Y+29, r24	; 0x1d
    1cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_Init+0x116>
    1d00:	9e 8f       	std	Y+30, r25	; 0x1e
    1d02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (50);
	LCD_WriteCommand(0b00111100);
    1d04:	8c e3       	ldi	r24, 0x3C	; 60
    1d06:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a0 e0       	ldi	r26, 0x00	; 0
    1d10:	b0 e4       	ldi	r27, 0x40	; 64
    1d12:	89 8f       	std	Y+25, r24	; 0x19
    1d14:	9a 8f       	std	Y+26, r25	; 0x1a
    1d16:	ab 8f       	std	Y+27, r26	; 0x1b
    1d18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a ef       	ldi	r20, 0xFA	; 250
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	8d 8b       	std	Y+21, r24	; 0x15
    1d34:	9e 8b       	std	Y+22, r25	; 0x16
    1d36:	af 8b       	std	Y+23, r26	; 0x17
    1d38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e8       	ldi	r20, 0x80	; 128
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d4e:	88 23       	and	r24, r24
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <LCD_Init+0x176>
		__ticks = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9c 8b       	std	Y+20, r25	; 0x14
    1d58:	8b 8b       	std	Y+19, r24	; 0x13
    1d5a:	3f c0       	rjmp	.+126    	; 0x1dda <LCD_Init+0x1f4>
	else if (__tmp > 65535)
    1d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d60:	8f 89       	ldd	r24, Y+23	; 0x17
    1d62:	98 8d       	ldd	r25, Y+24	; 0x18
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	3f ef       	ldi	r19, 0xFF	; 255
    1d68:	4f e7       	ldi	r20, 0x7F	; 127
    1d6a:	57 e4       	ldi	r21, 0x47	; 71
    1d6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d70:	18 16       	cp	r1, r24
    1d72:	4c f5       	brge	.+82     	; 0x1dc6 <LCD_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d74:	69 8d       	ldd	r22, Y+25	; 0x19
    1d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e2       	ldi	r20, 0x20	; 32
    1d82:	51 e4       	ldi	r21, 0x41	; 65
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9c 8b       	std	Y+20, r25	; 0x14
    1d9a:	8b 8b       	std	Y+19, r24	; 0x13
    1d9c:	0f c0       	rjmp	.+30     	; 0x1dbc <LCD_Init+0x1d6>
    1d9e:	88 ec       	ldi	r24, 0xC8	; 200
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9a 8b       	std	Y+18, r25	; 0x12
    1da4:	89 8b       	std	Y+17, r24	; 0x11
    1da6:	89 89       	ldd	r24, Y+17	; 0x11
    1da8:	9a 89       	ldd	r25, Y+18	; 0x12
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_Init+0x1c4>
    1dae:	9a 8b       	std	Y+18, r25	; 0x12
    1db0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db2:	8b 89       	ldd	r24, Y+19	; 0x13
    1db4:	9c 89       	ldd	r25, Y+20	; 0x14
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	9c 8b       	std	Y+20, r25	; 0x14
    1dba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	69 f7       	brne	.-38     	; 0x1d9e <LCD_Init+0x1b8>
    1dc4:	14 c0       	rjmp	.+40     	; 0x1dee <LCD_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dca:	8f 89       	ldd	r24, Y+23	; 0x17
    1dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9c 8b       	std	Y+20, r25	; 0x14
    1dd8:	8b 8b       	std	Y+19, r24	; 0x13
    1dda:	8b 89       	ldd	r24, Y+19	; 0x13
    1ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dde:	98 8b       	std	Y+16, r25	; 0x10
    1de0:	8f 87       	std	Y+15, r24	; 0x0f
    1de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de4:	98 89       	ldd	r25, Y+16	; 0x10
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_Init+0x200>
    1dea:	98 8b       	std	Y+16, r25	; 0x10
    1dec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);
	LCD_WriteCommand(0b00001110);
    1dee:	8e e0       	ldi	r24, 0x0E	; 14
    1df0:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e4       	ldi	r27, 0x40	; 64
    1dfc:	8b 87       	std	Y+11, r24	; 0x0b
    1dfe:	9c 87       	std	Y+12, r25	; 0x0c
    1e00:	ad 87       	std	Y+13, r26	; 0x0d
    1e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a ef       	ldi	r20, 0xFA	; 250
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8f 83       	std	Y+7, r24	; 0x07
    1e1e:	98 87       	std	Y+8, r25	; 0x08
    1e20:	a9 87       	std	Y+9, r26	; 0x09
    1e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <LCD_Init+0x260>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	8d 83       	std	Y+5, r24	; 0x05
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <LCD_Init+0x2de>
	else if (__tmp > 65535)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <LCD_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <LCD_Init+0x2c0>
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_Init+0x2ae>
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <LCD_Init+0x2a2>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <LCD_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_Init+0x2ea>
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
	LCD_WriteCommand(0b00000001);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
}
    1ede:	aa 96       	adiw	r28, 0x2a	; 42
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <LCD_GoToXY>:
void LCD_GoToXY(u8 row , u8 column)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <LCD_GoToXY+0x6>
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	6a 83       	std	Y+2, r22	; 0x02
	if(row==0){
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	88 23       	and	r24, r24
    1f02:	29 f4       	brne	.+10     	; 0x1f0e <LCD_GoToXY+0x1e>
		LCD_WriteCommand(128+column);
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	80 58       	subi	r24, 0x80	; 128
    1f08:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <LCD_GoToXY+0x2c>
	}
	else if (row==1){
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	21 f4       	brne	.+8      	; 0x1f1c <LCD_GoToXY+0x2c>
		LCD_WriteCommand(128+64+column);
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	80 54       	subi	r24, 0x40	; 64
    1f18:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
	}
}
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LCD_WriteString>:
extern void LCD_WriteString (u8 line,u8 column,u8 string[])
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	a1 97       	sbiw	r28, 0x21	; 33
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f3c:	6f 8f       	std	Y+31, r22	; 0x1f
    1f3e:	59 a3       	std	Y+33, r21	; 0x21
    1f40:	48 a3       	std	Y+32, r20	; 0x20
	u8 i=0;
    1f42:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_GoToXY(line,column);
    1f44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f46:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f48:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_GoToXY>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e0       	ldi	r26, 0x00	; 0
    1f52:	b0 e4       	ldi	r27, 0x40	; 64
    1f54:	89 8f       	std	Y+25, r24	; 0x19
    1f56:	9a 8f       	std	Y+26, r25	; 0x1a
    1f58:	ab 8f       	std	Y+27, r26	; 0x1b
    1f5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8d 8b       	std	Y+21, r24	; 0x15
    1f76:	9e 8b       	std	Y+22, r25	; 0x16
    1f78:	af 8b       	std	Y+23, r26	; 0x17
    1f7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f80:	8f 89       	ldd	r24, Y+23	; 0x17
    1f82:	98 8d       	ldd	r25, Y+24	; 0x18
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <LCD_WriteString+0x78>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9c 8b       	std	Y+20, r25	; 0x14
    1f9a:	8b 8b       	std	Y+19, r24	; 0x13
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <LCD_WriteString+0xf6>
	else if (__tmp > 65535)
    1f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <LCD_WriteString+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9c 8b       	std	Y+20, r25	; 0x14
    1fdc:	8b 8b       	std	Y+19, r24	; 0x13
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <LCD_WriteString+0xd8>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9a 8b       	std	Y+18, r25	; 0x12
    1fe6:	89 8b       	std	Y+17, r24	; 0x11
    1fe8:	89 89       	ldd	r24, Y+17	; 0x11
    1fea:	9a 89       	ldd	r25, Y+18	; 0x12
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_WriteString+0xc6>
    1ff0:	9a 8b       	std	Y+18, r25	; 0x12
    1ff2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9c 8b       	std	Y+20, r25	; 0x14
    1ffc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <LCD_WriteString+0xba>
    2006:	95 c0       	rjmp	.+298    	; 0x2132 <LCD_WriteString+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6d 89       	ldd	r22, Y+21	; 0x15
    200a:	7e 89       	ldd	r23, Y+22	; 0x16
    200c:	8f 89       	ldd	r24, Y+23	; 0x17
    200e:	98 8d       	ldd	r25, Y+24	; 0x18
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
    201c:	8b 89       	ldd	r24, Y+19	; 0x13
    201e:	9c 89       	ldd	r25, Y+20	; 0x14
    2020:	98 8b       	std	Y+16, r25	; 0x10
    2022:	8f 87       	std	Y+15, r24	; 0x0f
    2024:	8f 85       	ldd	r24, Y+15	; 0x0f
    2026:	98 89       	ldd	r25, Y+16	; 0x10
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_WriteString+0x102>
    202c:	98 8b       	std	Y+16, r25	; 0x10
    202e:	8f 87       	std	Y+15, r24	; 0x0f
    2030:	80 c0       	rjmp	.+256    	; 0x2132 <LCD_WriteString+0x20c>
	_delay_ms(2);
	while (string[i]!= 0)
	{
		LCD_WriteData(string[i]);
    2032:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	88 a1       	ldd	r24, Y+32	; 0x20
    203a:	99 a1       	ldd	r25, Y+33	; 0x21
    203c:	fc 01       	movw	r30, r24
    203e:	e2 0f       	add	r30, r18
    2040:	f3 1f       	adc	r31, r19
    2042:	80 81       	ld	r24, Z
    2044:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_WriteData>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e4       	ldi	r27, 0x40	; 64
    2050:	8b 87       	std	Y+11, r24	; 0x0b
    2052:	9c 87       	std	Y+12, r25	; 0x0c
    2054:	ad 87       	std	Y+13, r26	; 0x0d
    2056:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2058:	6b 85       	ldd	r22, Y+11	; 0x0b
    205a:	7c 85       	ldd	r23, Y+12	; 0x0c
    205c:	8d 85       	ldd	r24, Y+13	; 0x0d
    205e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	4a ef       	ldi	r20, 0xFA	; 250
    2066:	54 e4       	ldi	r21, 0x44	; 68
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	8f 83       	std	Y+7, r24	; 0x07
    2072:	98 87       	std	Y+8, r25	; 0x08
    2074:	a9 87       	std	Y+9, r26	; 0x09
    2076:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2078:	6f 81       	ldd	r22, Y+7	; 0x07
    207a:	78 85       	ldd	r23, Y+8	; 0x08
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e8       	ldi	r20, 0x80	; 128
    2086:	5f e3       	ldi	r21, 0x3F	; 63
    2088:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208c:	88 23       	and	r24, r24
    208e:	2c f4       	brge	.+10     	; 0x209a <LCD_WriteString+0x174>
		__ticks = 1;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	3f c0       	rjmp	.+126    	; 0x2118 <LCD_WriteString+0x1f2>
	else if (__tmp > 65535)
    209a:	6f 81       	ldd	r22, Y+7	; 0x07
    209c:	78 85       	ldd	r23, Y+8	; 0x08
    209e:	89 85       	ldd	r24, Y+9	; 0x09
    20a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	3f ef       	ldi	r19, 0xFF	; 255
    20a6:	4f e7       	ldi	r20, 0x7F	; 127
    20a8:	57 e4       	ldi	r21, 0x47	; 71
    20aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ae:	18 16       	cp	r1, r24
    20b0:	4c f5       	brge	.+82     	; 0x2104 <LCD_WriteString+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e2       	ldi	r20, 0x20	; 32
    20c0:	51 e4       	ldi	r21, 0x41	; 65
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9e 83       	std	Y+6, r25	; 0x06
    20d8:	8d 83       	std	Y+5, r24	; 0x05
    20da:	0f c0       	rjmp	.+30     	; 0x20fa <LCD_WriteString+0x1d4>
    20dc:	88 ec       	ldi	r24, 0xC8	; 200
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9c 83       	std	Y+4, r25	; 0x04
    20e2:	8b 83       	std	Y+3, r24	; 0x03
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_WriteString+0x1c2>
    20ec:	9c 83       	std	Y+4, r25	; 0x04
    20ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	69 f7       	brne	.-38     	; 0x20dc <LCD_WriteString+0x1b6>
    2102:	14 c0       	rjmp	.+40     	; 0x212c <LCD_WriteString+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_WriteString+0x1fe>
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
				i++;
    212c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212e:	8f 5f       	subi	r24, 0xFF	; 255
    2130:	8d 8f       	std	Y+29, r24	; 0x1d
extern void LCD_WriteString (u8 line,u8 column,u8 string[])
{
	u8 i=0;
	LCD_GoToXY(line,column);
	_delay_ms(2);
	while (string[i]!= 0)
    2132:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	88 a1       	ldd	r24, Y+32	; 0x20
    213a:	99 a1       	ldd	r25, Y+33	; 0x21
    213c:	fc 01       	movw	r30, r24
    213e:	e2 0f       	add	r30, r18
    2140:	f3 1f       	adc	r31, r19
    2142:	80 81       	ld	r24, Z
    2144:	88 23       	and	r24, r24
    2146:	09 f0       	breq	.+2      	; 0x214a <LCD_WriteString+0x224>
    2148:	74 cf       	rjmp	.-280    	; 0x2032 <LCD_WriteString+0x10c>
	{
		LCD_WriteData(string[i]);
		_delay_ms(2);
				i++;
	}
}
    214a:	a1 96       	adiw	r28, 0x21	; 33
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <LCD_WriteStringOnCursor>:
extern void LCD_WriteStringOnCursor (u8 string[])
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	6f 97       	sbiw	r28, 0x1f	; 31
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	9f 8f       	std	Y+31, r25	; 0x1f
    2172:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 i=0;
    2174:	1d 8e       	std	Y+29, r1	; 0x1d
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	a0 e0       	ldi	r26, 0x00	; 0
    217c:	b0 e4       	ldi	r27, 0x40	; 64
    217e:	89 8f       	std	Y+25, r24	; 0x19
    2180:	9a 8f       	std	Y+26, r25	; 0x1a
    2182:	ab 8f       	std	Y+27, r26	; 0x1b
    2184:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2186:	69 8d       	ldd	r22, Y+25	; 0x19
    2188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    218a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    218c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	4a ef       	ldi	r20, 0xFA	; 250
    2194:	54 e4       	ldi	r21, 0x44	; 68
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	8d 8b       	std	Y+21, r24	; 0x15
    21a0:	9e 8b       	std	Y+22, r25	; 0x16
    21a2:	af 8b       	std	Y+23, r26	; 0x17
    21a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e8       	ldi	r20, 0x80	; 128
    21b4:	5f e3       	ldi	r21, 0x3F	; 63
    21b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ba:	88 23       	and	r24, r24
    21bc:	2c f4       	brge	.+10     	; 0x21c8 <LCD_WriteStringOnCursor+0x6c>
		__ticks = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9c 8b       	std	Y+20, r25	; 0x14
    21c4:	8b 8b       	std	Y+19, r24	; 0x13
    21c6:	3f c0       	rjmp	.+126    	; 0x2246 <LCD_WriteStringOnCursor+0xea>
	else if (__tmp > 65535)
    21c8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ca:	7e 89       	ldd	r23, Y+22	; 0x16
    21cc:	8f 89       	ldd	r24, Y+23	; 0x17
    21ce:	98 8d       	ldd	r25, Y+24	; 0x18
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	3f ef       	ldi	r19, 0xFF	; 255
    21d4:	4f e7       	ldi	r20, 0x7F	; 127
    21d6:	57 e4       	ldi	r21, 0x47	; 71
    21d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21dc:	18 16       	cp	r1, r24
    21de:	4c f5       	brge	.+82     	; 0x2232 <LCD_WriteStringOnCursor+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e0:	69 8d       	ldd	r22, Y+25	; 0x19
    21e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e2       	ldi	r20, 0x20	; 32
    21ee:	51 e4       	ldi	r21, 0x41	; 65
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	bc 01       	movw	r22, r24
    21fa:	cd 01       	movw	r24, r26
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
    2208:	0f c0       	rjmp	.+30     	; 0x2228 <LCD_WriteStringOnCursor+0xcc>
    220a:	88 ec       	ldi	r24, 0xC8	; 200
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9a 8b       	std	Y+18, r25	; 0x12
    2210:	89 8b       	std	Y+17, r24	; 0x11
    2212:	89 89       	ldd	r24, Y+17	; 0x11
    2214:	9a 89       	ldd	r25, Y+18	; 0x12
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_WriteStringOnCursor+0xba>
    221a:	9a 8b       	std	Y+18, r25	; 0x12
    221c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221e:	8b 89       	ldd	r24, Y+19	; 0x13
    2220:	9c 89       	ldd	r25, Y+20	; 0x14
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	9c 8b       	std	Y+20, r25	; 0x14
    2226:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2228:	8b 89       	ldd	r24, Y+19	; 0x13
    222a:	9c 89       	ldd	r25, Y+20	; 0x14
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	69 f7       	brne	.-38     	; 0x220a <LCD_WriteStringOnCursor+0xae>
    2230:	95 c0       	rjmp	.+298    	; 0x235c <LCD_WriteStringOnCursor+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2232:	6d 89       	ldd	r22, Y+21	; 0x15
    2234:	7e 89       	ldd	r23, Y+22	; 0x16
    2236:	8f 89       	ldd	r24, Y+23	; 0x17
    2238:	98 8d       	ldd	r25, Y+24	; 0x18
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9c 8b       	std	Y+20, r25	; 0x14
    2244:	8b 8b       	std	Y+19, r24	; 0x13
    2246:	8b 89       	ldd	r24, Y+19	; 0x13
    2248:	9c 89       	ldd	r25, Y+20	; 0x14
    224a:	98 8b       	std	Y+16, r25	; 0x10
    224c:	8f 87       	std	Y+15, r24	; 0x0f
    224e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2250:	98 89       	ldd	r25, Y+16	; 0x10
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_WriteStringOnCursor+0xf6>
    2256:	98 8b       	std	Y+16, r25	; 0x10
    2258:	8f 87       	std	Y+15, r24	; 0x0f
    225a:	80 c0       	rjmp	.+256    	; 0x235c <LCD_WriteStringOnCursor+0x200>
	_delay_ms(2);
	while (string[i]!= 0)
	{
		LCD_WriteData(string[i]);
    225c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2264:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2266:	fc 01       	movw	r30, r24
    2268:	e2 0f       	add	r30, r18
    226a:	f3 1f       	adc	r31, r19
    226c:	80 81       	ld	r24, Z
    226e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_WriteData>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a0 e0       	ldi	r26, 0x00	; 0
    2278:	b0 e4       	ldi	r27, 0x40	; 64
    227a:	8b 87       	std	Y+11, r24	; 0x0b
    227c:	9c 87       	std	Y+12, r25	; 0x0c
    227e:	ad 87       	std	Y+13, r26	; 0x0d
    2280:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a ef       	ldi	r20, 0xFA	; 250
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8f 83       	std	Y+7, r24	; 0x07
    229c:	98 87       	std	Y+8, r25	; 0x08
    229e:	a9 87       	std	Y+9, r26	; 0x09
    22a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <LCD_WriteStringOnCursor+0x168>
		__ticks = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	3f c0       	rjmp	.+126    	; 0x2342 <LCD_WriteStringOnCursor+0x1e6>
	else if (__tmp > 65535)
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	3f ef       	ldi	r19, 0xFF	; 255
    22d0:	4f e7       	ldi	r20, 0x7F	; 127
    22d2:	57 e4       	ldi	r21, 0x47	; 71
    22d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d8:	18 16       	cp	r1, r24
    22da:	4c f5       	brge	.+82     	; 0x232e <LCD_WriteStringOnCursor+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	0f c0       	rjmp	.+30     	; 0x2324 <LCD_WriteStringOnCursor+0x1c8>
    2306:	88 ec       	ldi	r24, 0xC8	; 200
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_WriteStringOnCursor+0x1b6>
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	69 f7       	brne	.-38     	; 0x2306 <LCD_WriteStringOnCursor+0x1aa>
    232c:	14 c0       	rjmp	.+40     	; 0x2356 <LCD_WriteStringOnCursor+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232e:	6f 81       	ldd	r22, Y+7	; 0x07
    2330:	78 85       	ldd	r23, Y+8	; 0x08
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	9a 85       	ldd	r25, Y+10	; 0x0a
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	9e 81       	ldd	r25, Y+6	; 0x06
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_WriteStringOnCursor+0x1f2>
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
				i++;
    2356:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	8d 8f       	std	Y+29, r24	; 0x1d
}
extern void LCD_WriteStringOnCursor (u8 string[])
{
	u8 i=0;
	_delay_ms(2);
	while (string[i]!= 0)
    235c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2364:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2366:	fc 01       	movw	r30, r24
    2368:	e2 0f       	add	r30, r18
    236a:	f3 1f       	adc	r31, r19
    236c:	80 81       	ld	r24, Z
    236e:	88 23       	and	r24, r24
    2370:	09 f0       	breq	.+2      	; 0x2374 <LCD_WriteStringOnCursor+0x218>
    2372:	74 cf       	rjmp	.-280    	; 0x225c <LCD_WriteStringOnCursor+0x100>
	{
		LCD_WriteData(string[i]);
		_delay_ms(2);
				i++;
	}
}
    2374:	6f 96       	adiw	r28, 0x1f	; 31
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <LCD_WriteInt>:


void LCD_WriteInt(u32 COPY_u32Number)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	64 97       	sbiw	r28, 0x14	; 20
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	69 8b       	std	Y+17, r22	; 0x11
    239c:	7a 8b       	std	Y+18, r23	; 0x12
    239e:	8b 8b       	std	Y+19, r24	; 0x13
    23a0:	9c 8b       	std	Y+20, r25	; 0x14
	u8 LOCAL_u8Num[10]={0};
    23a2:	8a e0       	ldi	r24, 0x0A	; 10
    23a4:	fe 01       	movw	r30, r28
    23a6:	37 96       	adiw	r30, 0x07	; 7
    23a8:	df 01       	movw	r26, r30
    23aa:	98 2f       	mov	r25, r24
    23ac:	1d 92       	st	X+, r1
    23ae:	9a 95       	dec	r25
    23b0:	e9 f7       	brne	.-6      	; 0x23ac <LCD_WriteInt+0x26>
	s16 i=0;
    23b2:	1e 82       	std	Y+6, r1	; 0x06
    23b4:	1d 82       	std	Y+5, r1	; 0x05
	u32 LOCAL_u32Remainder;
	if(COPY_u32Number==0)
    23b6:	89 89       	ldd	r24, Y+17	; 0x11
    23b8:	9a 89       	ldd	r25, Y+18	; 0x12
    23ba:	ab 89       	ldd	r26, Y+19	; 0x13
    23bc:	bc 89       	ldd	r27, Y+20	; 0x14
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	a1 05       	cpc	r26, r1
    23c2:	b1 05       	cpc	r27, r1
    23c4:	19 f4       	brne	.+6      	; 0x23cc <LCD_WriteInt+0x46>
	{
		LCD_WriteData('0');
    23c6:	80 e3       	ldi	r24, 0x30	; 48
    23c8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_WriteData>
	}

	if(COPY_u32Number>0)
    23cc:	89 89       	ldd	r24, Y+17	; 0x11
    23ce:	9a 89       	ldd	r25, Y+18	; 0x12
    23d0:	ab 89       	ldd	r26, Y+19	; 0x13
    23d2:	bc 89       	ldd	r27, Y+20	; 0x14
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	a1 05       	cpc	r26, r1
    23d8:	b1 05       	cpc	r27, r1
    23da:	09 f4       	brne	.+2      	; 0x23de <LCD_WriteInt+0x58>
    23dc:	55 c0       	rjmp	.+170    	; 0x2488 <LCD_WriteInt+0x102>
    23de:	32 c0       	rjmp	.+100    	; 0x2444 <LCD_WriteInt+0xbe>
	{
		while(COPY_u32Number!=0)
		{
			LOCAL_u32Remainder=COPY_u32Number%10;
    23e0:	89 89       	ldd	r24, Y+17	; 0x11
    23e2:	9a 89       	ldd	r25, Y+18	; 0x12
    23e4:	ab 89       	ldd	r26, Y+19	; 0x13
    23e6:	bc 89       	ldd	r27, Y+20	; 0x14
    23e8:	2a e0       	ldi	r18, 0x0A	; 10
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__udivmodsi4>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	ab 83       	std	Y+3, r26	; 0x03
    2402:	bc 83       	std	Y+4, r27	; 0x04
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
    2404:	2d 81       	ldd	r18, Y+5	; 0x05
    2406:	3e 81       	ldd	r19, Y+6	; 0x06
    2408:	49 81       	ldd	r20, Y+1	; 0x01
    240a:	ce 01       	movw	r24, r28
    240c:	07 96       	adiw	r24, 0x07	; 7
    240e:	fc 01       	movw	r30, r24
    2410:	e2 0f       	add	r30, r18
    2412:	f3 1f       	adc	r31, r19
    2414:	40 83       	st	Z, r20
			COPY_u32Number=COPY_u32Number/10;
    2416:	89 89       	ldd	r24, Y+17	; 0x11
    2418:	9a 89       	ldd	r25, Y+18	; 0x12
    241a:	ab 89       	ldd	r26, Y+19	; 0x13
    241c:	bc 89       	ldd	r27, Y+20	; 0x14
    241e:	2a e0       	ldi	r18, 0x0A	; 10
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__udivmodsi4>
    242e:	da 01       	movw	r26, r20
    2430:	c9 01       	movw	r24, r18
    2432:	89 8b       	std	Y+17, r24	; 0x11
    2434:	9a 8b       	std	Y+18, r25	; 0x12
    2436:	ab 8b       	std	Y+19, r26	; 0x13
    2438:	bc 8b       	std	Y+20, r27	; 0x14
			i++;
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
		LCD_WriteData('0');
	}

	if(COPY_u32Number>0)
	{
		while(COPY_u32Number!=0)
    2444:	89 89       	ldd	r24, Y+17	; 0x11
    2446:	9a 89       	ldd	r25, Y+18	; 0x12
    2448:	ab 89       	ldd	r26, Y+19	; 0x13
    244a:	bc 89       	ldd	r27, Y+20	; 0x14
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	a1 05       	cpc	r26, r1
    2450:	b1 05       	cpc	r27, r1
    2452:	31 f6       	brne	.-116    	; 0x23e0 <LCD_WriteInt+0x5a>
			LOCAL_u32Remainder=COPY_u32Number%10;
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	9e 83       	std	Y+6, r25	; 0x06
    245c:	8d 83       	std	Y+5, r24	; 0x05
    245e:	10 c0       	rjmp	.+32     	; 0x2480 <LCD_WriteInt+0xfa>
		while(i>=0)
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
    2460:	2d 81       	ldd	r18, Y+5	; 0x05
    2462:	3e 81       	ldd	r19, Y+6	; 0x06
    2464:	ce 01       	movw	r24, r28
    2466:	07 96       	adiw	r24, 0x07	; 7
    2468:	fc 01       	movw	r30, r24
    246a:	e2 0f       	add	r30, r18
    246c:	f3 1f       	adc	r31, r19
    246e:	80 81       	ld	r24, Z
    2470:	80 5d       	subi	r24, 0xD0	; 208
    2472:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_WriteData>
			i--;
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
		while(i>=0)
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	99 23       	and	r25, r25
    2486:	64 f7       	brge	.-40     	; 0x2460 <LCD_WriteInt+0xda>
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
			i--;
		}
	}
}
    2488:	64 96       	adiw	r28, 0x14	; 20
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <LCD_WriteSpecialChar>:




void LCD_WriteSpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	27 97       	sbiw	r28, 0x07	; 7
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
    24b2:	6d 83       	std	Y+5, r22	; 0x05
    24b4:	4e 83       	std	Y+6, r20	; 0x06
    24b6:	2f 83       	std	Y+7, r18	; 0x07
	LCD_GoToXY( Copy_u8RowNum, Copy_u8ColNum);
    24b8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_GoToXY>
	LCD_WriteData(CGRam_index);
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_WriteData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	88 30       	cpi	r24, 0x08	; 8
    24ca:	18 f5       	brcc	.+70     	; 0x2512 <LCD_WriteSpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	80 64       	ori	r24, 0x40	; 64
    24e4:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteCommand(Local_u8address);
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    24ec:	19 82       	std	Y+1, r1	; 0x01
    24ee:	0e c0       	rjmp	.+28     	; 0x250c <LCD_WriteSpecialChar+0x72>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	fc 01       	movw	r30, r24
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	80 81       	ld	r24, Z
    2502:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_WriteData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		LCD_WriteCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	8f 5f       	subi	r24, 0xFF	; 255
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	78 f3       	brcs	.-34     	; 0x24f0 <LCD_WriteSpecialChar+0x56>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	LCD_WriteCommand(0x02);
    2512:	82 e0       	ldi	r24, 0x02	; 2
    2514:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>

}
    2518:	27 96       	adiw	r28, 0x07	; 7
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <KPD_u8GetPressedKey>:
#include "KPD_INTERFACE.h"
#include "KPD_CONFIG.h"
#include "KPD_PRIVATE.h"

u8 KPD_u8GetPressedKey(void)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <KPD_u8GetPressedKey+0x6>
    2530:	00 d0       	rcall	.+0      	; 0x2532 <KPD_u8GetPressedKey+0x8>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Pressed=KPD_NO_PRESSED_KEY;
    2536:	8f ef       	ldi	r24, 0xFF	; 255
    2538:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0,KPD_COLUMN1,KPD_COLUMN2,KPD_COLUMN3};
	static u8 Local_u8KPDRowArr[ROW_NUM]	  ={KPD_ROW0	,KPD_ROW1	,KPD_ROW2	,KPD_ROW3};

	for (Local_u8Columnidx=0 ; Local_u8Columnidx < COLUMN_NUM ; Local_u8Columnidx++)
    253a:	1a 82       	std	Y+2, r1	; 0x02
    253c:	6a c0       	rjmp	.+212    	; 0x2612 <KPD_u8GetPressedKey+0xe8>
	{
		//active column = set to low
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8Columnidx],DIO_LOW);
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	fc 01       	movw	r30, r24
    2546:	e5 5e       	subi	r30, 0xE5	; 229
    2548:	fe 4f       	sbci	r31, 0xFE	; 254
    254a:	90 81       	ld	r25, Z
    254c:	83 e0       	ldi	r24, 0x03	; 3
    254e:	69 2f       	mov	r22, r25
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
		for (Local_u8Rowidx=0 ; Local_u8Rowidx < ROW_NUM ; Local_u8Rowidx++)
    2556:	19 82       	std	Y+1, r1	; 0x01
    2558:	49 c0       	rjmp	.+146    	; 0x25ec <KPD_u8GetPressedKey+0xc2>
		{
			DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8Rowidx]);
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	fc 01       	movw	r30, r24
    2562:	e9 5e       	subi	r30, 0xE9	; 233
    2564:	fe 4f       	sbci	r31, 0xFE	; 254
    2566:	90 81       	ld	r25, Z
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	69 2f       	mov	r22, r25
    256c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_GetPinValue>

			if(DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8Rowidx]) == DIO_LOW)
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	fc 01       	movw	r30, r24
    2578:	e9 5e       	subi	r30, 0xE9	; 233
    257a:	fe 4f       	sbci	r31, 0xFE	; 254
    257c:	90 81       	ld	r25, Z
    257e:	83 e0       	ldi	r24, 0x03	; 3
    2580:	69 2f       	mov	r22, r25
    2582:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_GetPinValue>
    2586:	88 23       	and	r24, r24
    2588:	71 f5       	brne	.+92     	; 0x25e6 <KPD_u8GetPressedKey+0xbc>
			{
				Local_u8Pressed=Local_u8KPDArr[Local_u8Rowidx][Local_u8Columnidx];
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	48 2f       	mov	r20, r24
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	ca 01       	movw	r24, r20
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	82 0f       	add	r24, r18
    25a2:	93 1f       	adc	r25, r19
    25a4:	fc 01       	movw	r30, r24
    25a6:	e1 5e       	subi	r30, 0xE1	; 225
    25a8:	fe 4f       	sbci	r31, 0xFE	; 254
    25aa:	80 81       	ld	r24, Z
    25ac:	8b 83       	std	Y+3, r24	; 0x03
    25ae:	0b c0       	rjmp	.+22     	; 0x25c6 <KPD_u8GetPressedKey+0x9c>
				while (DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8Rowidx]) == DIO_LOW)
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8Rowidx]);
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	fc 01       	movw	r30, r24
    25b8:	e9 5e       	subi	r30, 0xE9	; 233
    25ba:	fe 4f       	sbci	r31, 0xFE	; 254
    25bc:	90 81       	ld	r25, Z
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	69 2f       	mov	r22, r25
    25c2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_GetPinValue>
			DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8Rowidx]);

			if(DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8Rowidx]) == DIO_LOW)
			{
				Local_u8Pressed=Local_u8KPDArr[Local_u8Rowidx][Local_u8Columnidx];
				while (DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8Rowidx]) == DIO_LOW)
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	88 2f       	mov	r24, r24
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	fc 01       	movw	r30, r24
    25ce:	e9 5e       	subi	r30, 0xE9	; 233
    25d0:	fe 4f       	sbci	r31, 0xFE	; 254
    25d2:	90 81       	ld	r25, Z
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	69 2f       	mov	r22, r25
    25d8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_GetPinValue>
    25dc:	88 23       	and	r24, r24
    25de:	41 f3       	breq	.-48     	; 0x25b0 <KPD_u8GetPressedKey+0x86>
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8Rowidx]);
				}
				return Local_u8Pressed;
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	8c 83       	std	Y+4, r24	; 0x04
    25e4:	1c c0       	rjmp	.+56     	; 0x261e <KPD_u8GetPressedKey+0xf4>

	for (Local_u8Columnidx=0 ; Local_u8Columnidx < COLUMN_NUM ; Local_u8Columnidx++)
	{
		//active column = set to low
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8Columnidx],DIO_LOW);
		for (Local_u8Rowidx=0 ; Local_u8Rowidx < ROW_NUM ; Local_u8Rowidx++)
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	84 30       	cpi	r24, 0x04	; 4
    25f0:	08 f4       	brcc	.+2      	; 0x25f4 <KPD_u8GetPressedKey+0xca>
    25f2:	b3 cf       	rjmp	.-154    	; 0x255a <KPD_u8GetPressedKey+0x30>
				}
				return Local_u8Pressed;
			}
		}
		//deactive column = set to high
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8Columnidx],DIO_HIGH);
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	fc 01       	movw	r30, r24
    25fc:	e5 5e       	subi	r30, 0xE5	; 229
    25fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2600:	90 81       	ld	r25, Z
    2602:	83 e0       	ldi	r24, 0x03	; 3
    2604:	69 2f       	mov	r22, r25
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0,KPD_COLUMN1,KPD_COLUMN2,KPD_COLUMN3};
	static u8 Local_u8KPDRowArr[ROW_NUM]	  ={KPD_ROW0	,KPD_ROW1	,KPD_ROW2	,KPD_ROW3};

	for (Local_u8Columnidx=0 ; Local_u8Columnidx < COLUMN_NUM ; Local_u8Columnidx++)
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	8f 5f       	subi	r24, 0xFF	; 255
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	84 30       	cpi	r24, 0x04	; 4
    2616:	08 f4       	brcc	.+2      	; 0x261a <KPD_u8GetPressedKey+0xf0>
    2618:	92 cf       	rjmp	.-220    	; 0x253e <KPD_u8GetPressedKey+0x14>
		}
		//deactive column = set to high
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8Columnidx],DIO_HIGH);

	}
	return Local_u8Pressed;
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	8c 83       	std	Y+4, r24	; 0x04
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <KPD_VoidInit>:
void KPD_VoidInit(void)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
	//Set keypad
		//KP columns output
		DIO_SetPinDirection(KPD_PORT,KPD_COLUMN0,DIO_OUTPUT);
    2636:	83 e0       	ldi	r24, 0x03	; 3
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
		DIO_SetPinDirection(KPD_PORT,KPD_COLUMN1,DIO_OUTPUT);
    2640:	83 e0       	ldi	r24, 0x03	; 3
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
		DIO_SetPinDirection(KPD_PORT,KPD_COLUMN2,DIO_OUTPUT);
    264a:	83 e0       	ldi	r24, 0x03	; 3
    264c:	62 e0       	ldi	r22, 0x02	; 2
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
		DIO_SetPinDirection(KPD_PORT,KPD_COLUMN3,DIO_OUTPUT);
    2654:	83 e0       	ldi	r24, 0x03	; 3
    2656:	63 e0       	ldi	r22, 0x03	; 3
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
		//KP rows input
		DIO_SetPinDirection(KPD_PORT,KPD_ROW0,DIO_INPUT);
    265e:	83 e0       	ldi	r24, 0x03	; 3
    2660:	64 e0       	ldi	r22, 0x04	; 4
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW1,DIO_INPUT);
    2668:	83 e0       	ldi	r24, 0x03	; 3
    266a:	65 e0       	ldi	r22, 0x05	; 5
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW2,DIO_INPUT);
    2672:	83 e0       	ldi	r24, 0x03	; 3
    2674:	66 e0       	ldi	r22, 0x06	; 6
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW3,DIO_INPUT);
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	67 e0       	ldi	r22, 0x07	; 7
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
		//all KP pins high (pULLED uP)
		DIO_SetPortValue(KPD_PORT,DIO_PORT_HIGH);
    2686:	83 e0       	ldi	r24, 0x03	; 3
    2688:	6f ef       	ldi	r22, 0xFF	; 255
    268a:	0e 94 9e 0b 	call	0x173c	; 0x173c <DIO_SetPortValue>
}
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <main>:
 * 				Return :	u16 Reading of LM35
 * 				Functionality : Measuring Temperature via ADC Channel
 **********************************************************************************************/
u16 Temp_voidGetTemperature(u8 TEMP_Channel);
int main()
{
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	c7 55       	subi	r28, 0x57	; 87
    26a2:	d0 40       	sbci	r29, 0x00	; 0
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
	/*Initialize KeyPad*/
	KPD_VoidInit();
    26ae:	0e 94 17 13 	call	0x262e	; 0x262e <KPD_VoidInit>
	LCD_Init(); //initializing LCD
    26b2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <LCD_Init>
	ADC_voidInit();	 //initializing ADC
    26b6:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_voidInit>
	TIMER0_voidInit();
    26ba:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMER0_voidInit>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT);     //ADC Pin input to read temperature
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN1,DIO_OUTPUT);	   //Servo motor Pin output
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	61 e0       	ldi	r22, 0x01	; 1
    26cc:	41 e0       	ldi	r20, 0x01	; 1
    26ce:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>

	DIO_SetPinDirection(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);    //Lights Pin
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	65 e0       	ldi	r22, 0x05	; 5
    26d6:	41 e0       	ldi	r20, 0x01	; 1
    26d8:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);     //TV Pin
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	66 e0       	ldi	r22, 0x06	; 6
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);     //Heater Pin
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	67 e0       	ldi	r22, 0x07	; 7
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_SetPinDirection>
    26f0:	0f c4       	rjmp	.+2078   	; 0x2f10 <main+0x87c>

	while (tries!=2) /*Checking How many times password entered*/
	{
		/******************Setting Password in the start of Code****************/

		if (pass_status!=PASS_SET)/*check if password set previously or not*/
    26f2:	80 91 2f 01 	lds	r24, 0x012F
    26f6:	81 30       	cpi	r24, 0x01	; 1
    26f8:	09 f4       	brne	.+2      	; 0x26fc <main+0x68>
    26fa:	51 c1       	rjmp	.+674    	; 0x299e <main+0x30a>
		{
			LCD_WriteStringOnCursor("Login for First time");	//send string
    26fc:	80 e6       	ldi	r24, 0x60	; 96
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
    2704:	fe 01       	movw	r30, r28
    2706:	ef 5a       	subi	r30, 0xAF	; 175
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	aa e7       	ldi	r26, 0x7A	; 122
    2710:	b4 e4       	ldi	r27, 0x44	; 68
    2712:	80 83       	st	Z, r24
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	a2 83       	std	Z+2, r26	; 0x02
    2718:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271a:	8e 01       	movw	r16, r28
    271c:	03 5b       	subi	r16, 0xB3	; 179
    271e:	1f 4f       	sbci	r17, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	ef 5a       	subi	r30, 0xAF	; 175
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a ef       	ldi	r20, 0xFA	; 250
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	f8 01       	movw	r30, r16
    2740:	80 83       	st	Z, r24
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	a2 83       	std	Z+2, r26	; 0x02
    2746:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2748:	fe 01       	movw	r30, r28
    274a:	e3 5b       	subi	r30, 0xB3	; 179
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e8       	ldi	r20, 0x80	; 128
    275c:	5f e3       	ldi	r21, 0x3F	; 63
    275e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2762:	88 23       	and	r24, r24
    2764:	44 f4       	brge	.+16     	; 0x2776 <main+0xe2>
		__ticks = 1;
    2766:	fe 01       	movw	r30, r28
    2768:	e5 5b       	subi	r30, 0xB5	; 181
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
    2774:	64 c0       	rjmp	.+200    	; 0x283e <main+0x1aa>
	else if (__tmp > 65535)
    2776:	fe 01       	movw	r30, r28
    2778:	e3 5b       	subi	r30, 0xB3	; 179
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	0c f0       	brlt	.+2      	; 0x2796 <main+0x102>
    2794:	43 c0       	rjmp	.+134    	; 0x281c <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2796:	fe 01       	movw	r30, r28
    2798:	ef 5a       	subi	r30, 0xAF	; 175
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	51 e4       	ldi	r21, 0x41	; 65
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	8e 01       	movw	r16, r28
    27b6:	05 5b       	subi	r16, 0xB5	; 181
    27b8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	f8 01       	movw	r30, r16
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
    27cc:	1f c0       	rjmp	.+62     	; 0x280c <main+0x178>
    27ce:	fe 01       	movw	r30, r28
    27d0:	e7 5b       	subi	r30, 0xB7	; 183
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	88 ec       	ldi	r24, 0xC8	; 200
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
    27dc:	fe 01       	movw	r30, r28
    27de:	e7 5b       	subi	r30, 0xB7	; 183
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	91 81       	ldd	r25, Z+1	; 0x01
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <main+0x152>
    27ea:	fe 01       	movw	r30, r28
    27ec:	e7 5b       	subi	r30, 0xB7	; 183
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	91 83       	std	Z+1, r25	; 0x01
    27f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f4:	de 01       	movw	r26, r28
    27f6:	a5 5b       	subi	r26, 0xB5	; 181
    27f8:	bf 4f       	sbci	r27, 0xFF	; 255
    27fa:	fe 01       	movw	r30, r28
    27fc:	e5 5b       	subi	r30, 0xB5	; 181
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	11 96       	adiw	r26, 0x01	; 1
    2808:	9c 93       	st	X, r25
    280a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280c:	fe 01       	movw	r30, r28
    280e:	e5 5b       	subi	r30, 0xB5	; 181
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	d1 f6       	brne	.-76     	; 0x27ce <main+0x13a>
    281a:	27 c0       	rjmp	.+78     	; 0x286a <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	8e 01       	movw	r16, r28
    281e:	05 5b       	subi	r16, 0xB5	; 181
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	e3 5b       	subi	r30, 0xB3	; 179
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	60 81       	ld	r22, Z
    282a:	71 81       	ldd	r23, Z+1	; 0x01
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	f8 01       	movw	r30, r16
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	80 83       	st	Z, r24
    283e:	de 01       	movw	r26, r28
    2840:	a9 5b       	subi	r26, 0xB9	; 185
    2842:	bf 4f       	sbci	r27, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	e5 5b       	subi	r30, 0xB5	; 181
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	8d 93       	st	X+, r24
    2850:	9c 93       	st	X, r25
    2852:	fe 01       	movw	r30, r28
    2854:	e9 5b       	subi	r30, 0xB9	; 185
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <main+0x1c8>
    2860:	fe 01       	movw	r30, r28
    2862:	e9 5b       	subi	r30, 0xB9	; 185
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
			_delay_ms(1000);									//Delaying to see output on LCD
			LCD_WriteCommand(lcd_clr);							//Clearing LCD
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
			LCD_WriteStringOnCursor("Set Admin Password");		//Send String
    2870:	85 e7       	ldi	r24, 0x75	; 117
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>

			EnterPass(settedpass);								/*Taking set password from user by Keypad*/
    2878:	81 e3       	ldi	r24, 0x31	; 49
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <EnterPass>
			pass_status=PASS_SET;		/*Setting status of password to set So that this piece of code don't be repeated*/
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	80 93 2f 01 	sts	0x012F, r24

			LCD_WriteCommand(lcd_clr);							//Clearing LCD
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
			LCD_WriteStringOnCursor("Setting Pass Done");		//Send String
    288c:	88 e8       	ldi	r24, 0x88	; 136
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
    2894:	fe 01       	movw	r30, r28
    2896:	ed 5b       	subi	r30, 0xBD	; 189
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	aa e7       	ldi	r26, 0x7A	; 122
    28a0:	b4 e4       	ldi	r27, 0x44	; 68
    28a2:	80 83       	st	Z, r24
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	a2 83       	std	Z+2, r26	; 0x02
    28a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28aa:	8e 01       	movw	r16, r28
    28ac:	01 5c       	subi	r16, 0xC1	; 193
    28ae:	1f 4f       	sbci	r17, 0xFF	; 255
    28b0:	fe 01       	movw	r30, r28
    28b2:	ed 5b       	subi	r30, 0xBD	; 189
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	60 81       	ld	r22, Z
    28b8:	71 81       	ldd	r23, Z+1	; 0x01
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	93 81       	ldd	r25, Z+3	; 0x03
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	4a ef       	ldi	r20, 0xFA	; 250
    28c4:	54 e4       	ldi	r21, 0x44	; 68
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	f8 01       	movw	r30, r16
    28d0:	80 83       	st	Z, r24
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	a2 83       	std	Z+2, r26	; 0x02
    28d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28d8:	fe 01       	movw	r30, r28
    28da:	ff 96       	adiw	r30, 0x3f	; 63
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	2c f4       	brge	.+10     	; 0x28fe <main+0x26a>
		__ticks = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9e af       	std	Y+62, r25	; 0x3e
    28fa:	8d af       	std	Y+61, r24	; 0x3d
    28fc:	46 c0       	rjmp	.+140    	; 0x298a <main+0x2f6>
	else if (__tmp > 65535)
    28fe:	fe 01       	movw	r30, r28
    2900:	ff 96       	adiw	r30, 0x3f	; 63
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	64 f5       	brge	.+88     	; 0x2972 <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	fe 01       	movw	r30, r28
    291c:	ed 5b       	subi	r30, 0xBD	; 189
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e2       	ldi	r20, 0x20	; 32
    292e:	51 e4       	ldi	r21, 0x41	; 65
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e af       	std	Y+62, r25	; 0x3e
    2946:	8d af       	std	Y+61, r24	; 0x3d
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <main+0x2d4>
    294a:	88 ec       	ldi	r24, 0xC8	; 200
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9c af       	std	Y+60, r25	; 0x3c
    2950:	8b af       	std	Y+59, r24	; 0x3b
    2952:	8b ad       	ldd	r24, Y+59	; 0x3b
    2954:	9c ad       	ldd	r25, Y+60	; 0x3c
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <main+0x2c2>
    295a:	9c af       	std	Y+60, r25	; 0x3c
    295c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2960:	9e ad       	ldd	r25, Y+62	; 0x3e
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	9e af       	std	Y+62, r25	; 0x3e
    2966:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2968:	8d ad       	ldd	r24, Y+61	; 0x3d
    296a:	9e ad       	ldd	r25, Y+62	; 0x3e
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	69 f7       	brne	.-38     	; 0x294a <main+0x2b6>
    2970:	16 c0       	rjmp	.+44     	; 0x299e <main+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2972:	fe 01       	movw	r30, r28
    2974:	ff 96       	adiw	r30, 0x3f	; 63
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9e af       	std	Y+62, r25	; 0x3e
    2988:	8d af       	std	Y+61, r24	; 0x3d
    298a:	8d ad       	ldd	r24, Y+61	; 0x3d
    298c:	9e ad       	ldd	r25, Y+62	; 0x3e
    298e:	9a af       	std	Y+58, r25	; 0x3a
    2990:	89 af       	std	Y+57, r24	; 0x39
    2992:	89 ad       	ldd	r24, Y+57	; 0x39
    2994:	9a ad       	ldd	r25, Y+58	; 0x3a
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <main+0x302>
    299a:	9a af       	std	Y+58, r25	; 0x3a
    299c:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);									//Delaying to see output on LCD
		}

		/************************logging in*********************************************/
		if (pass_status==PASS_SET)	/*check if password is previously set*/
    299e:	80 91 2f 01 	lds	r24, 0x012F
    29a2:	81 30       	cpi	r24, 0x01	; 1
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <main+0x314>
    29a6:	af c2       	rjmp	.+1374   	; 0x2f06 <main+0x872>
		{
			LCD_WriteCommand(lcd_clr);							//Clearing LCD
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
			LCD_WriteStringOnCursor("Enter Admin Pass");
    29ae:	8a e9       	ldi	r24, 0x9A	; 154
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>

			EnterPass(enteredpass);	//Taking entered Password from user
    29b6:	85 e3       	ldi	r24, 0x35	; 53
    29b8:	91 e0       	ldi	r25, 0x01	; 1
    29ba:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <EnterPass>
			u8 comparepassreturnedvalue=u8ComparePass(settedpass,enteredpass,4);//check entered pass with set password if they are equal
    29be:	81 e3       	ldi	r24, 0x31	; 49
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	25 e3       	ldi	r18, 0x35	; 53
    29c4:	31 e0       	ldi	r19, 0x01	; 1
    29c6:	b9 01       	movw	r22, r18
    29c8:	44 e0       	ldi	r20, 0x04	; 4
    29ca:	0e 94 6e 18 	call	0x30dc	; 0x30dc <u8ComparePass>
    29ce:	fe 01       	movw	r30, r28
    29d0:	e9 5a       	subi	r30, 0xA9	; 169
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 83       	st	Z, r24
    29d6:	36 c1       	rjmp	.+620    	; 0x2c44 <main+0x5b0>

			while (login_status!=logged)
			{
				if(comparepassreturnedvalue==rightpass)  				//Checking entered pass if correct
    29d8:	fe 01       	movw	r30, r28
    29da:	e9 5a       	subi	r30, 0xA9	; 169
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	88 23       	and	r24, r24
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <main+0x352>
    29e4:	01 c1       	rjmp	.+514    	; 0x2be8 <main+0x554>
				{
					LCD_WriteCommand(lcd_clr);							//Clearing LCD
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
					LCD_GoToXY(0,0);
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	60 e0       	ldi	r22, 0x00	; 0
    29f0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_GoToXY>
					LCD_WriteStringOnCursor("Door Opening");
    29f4:	8b ea       	ldi	r24, 0xAB	; 171
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	aa e7       	ldi	r26, 0x7A	; 122
    2a02:	b4 e4       	ldi	r27, 0x44	; 68
    2a04:	8d ab       	std	Y+53, r24	; 0x35
    2a06:	9e ab       	std	Y+54, r25	; 0x36
    2a08:	af ab       	std	Y+55, r26	; 0x37
    2a0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a10:	8f a9       	ldd	r24, Y+55	; 0x37
    2a12:	98 ad       	ldd	r25, Y+56	; 0x38
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	4a ef       	ldi	r20, 0xFA	; 250
    2a1a:	54 e4       	ldi	r21, 0x44	; 68
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	89 ab       	std	Y+49, r24	; 0x31
    2a26:	9a ab       	std	Y+50, r25	; 0x32
    2a28:	ab ab       	std	Y+51, r26	; 0x33
    2a2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a30:	8b a9       	ldd	r24, Y+51	; 0x33
    2a32:	9c a9       	ldd	r25, Y+52	; 0x34
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a40:	88 23       	and	r24, r24
    2a42:	2c f4       	brge	.+10     	; 0x2a4e <main+0x3ba>
		__ticks = 1;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	98 ab       	std	Y+48, r25	; 0x30
    2a4a:	8f a7       	std	Y+47, r24	; 0x2f
    2a4c:	3f c0       	rjmp	.+126    	; 0x2acc <main+0x438>
	else if (__tmp > 65535)
    2a4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a50:	7a a9       	ldd	r23, Y+50	; 0x32
    2a52:	8b a9       	ldd	r24, Y+51	; 0x33
    2a54:	9c a9       	ldd	r25, Y+52	; 0x34
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	3f ef       	ldi	r19, 0xFF	; 255
    2a5a:	4f e7       	ldi	r20, 0x7F	; 127
    2a5c:	57 e4       	ldi	r21, 0x47	; 71
    2a5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	4c f5       	brge	.+82     	; 0x2ab8 <main+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a66:	6d a9       	ldd	r22, Y+53	; 0x35
    2a68:	7e a9       	ldd	r23, Y+54	; 0x36
    2a6a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a6c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e2       	ldi	r20, 0x20	; 32
    2a74:	51 e4       	ldi	r21, 0x41	; 65
    2a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	98 ab       	std	Y+48, r25	; 0x30
    2a8c:	8f a7       	std	Y+47, r24	; 0x2f
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <main+0x41a>
    2a90:	88 ec       	ldi	r24, 0xC8	; 200
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9e a7       	std	Y+46, r25	; 0x2e
    2a96:	8d a7       	std	Y+45, r24	; 0x2d
    2a98:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <main+0x408>
    2aa0:	9e a7       	std	Y+46, r25	; 0x2e
    2aa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	98 ab       	std	Y+48, r25	; 0x30
    2aac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	69 f7       	brne	.-38     	; 0x2a90 <main+0x3fc>
    2ab6:	14 c0       	rjmp	.+40     	; 0x2ae0 <main+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aba:	7a a9       	ldd	r23, Y+50	; 0x32
    2abc:	8b a9       	ldd	r24, Y+51	; 0x33
    2abe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	98 ab       	std	Y+48, r25	; 0x30
    2aca:	8f a7       	std	Y+47, r24	; 0x2f
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad0:	9c a7       	std	Y+44, r25	; 0x2c
    2ad2:	8b a7       	std	Y+43, r24	; 0x2b
    2ad4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ad6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <main+0x444>
    2adc:	9c a7       	std	Y+44, r25	; 0x2c
    2ade:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					Servo_VoidRotate90Deg();							//Open the door
    2ae0:	0e 94 2d 19 	call	0x325a	; 0x325a <Servo_VoidRotate90Deg>
					login_status=logged; 								//Changing login state to logged
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	80 93 3f 01 	sts	0x013F, r24
					tries=0;			 								//Tries counter settled to zero
    2aea:	10 92 3e 01 	sts	0x013E, r1
					LCD_WriteCommand(lcd_clr);							//Clearing LCD
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
					LCD_WriteStringOnCursor("Welcome");
    2af4:	88 eb       	ldi	r24, 0xB8	; 184
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	aa e7       	ldi	r26, 0x7A	; 122
    2b02:	b4 e4       	ldi	r27, 0x44	; 68
    2b04:	8f a3       	std	Y+39, r24	; 0x27
    2b06:	98 a7       	std	Y+40, r25	; 0x28
    2b08:	a9 a7       	std	Y+41, r26	; 0x29
    2b0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b0e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b10:	89 a5       	ldd	r24, Y+41	; 0x29
    2b12:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4a ef       	ldi	r20, 0xFA	; 250
    2b1a:	54 e4       	ldi	r21, 0x44	; 68
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8b a3       	std	Y+35, r24	; 0x23
    2b26:	9c a3       	std	Y+36, r25	; 0x24
    2b28:	ad a3       	std	Y+37, r26	; 0x25
    2b2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b30:	8d a1       	ldd	r24, Y+37	; 0x25
    2b32:	9e a1       	ldd	r25, Y+38	; 0x26
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <main+0x4ba>
		__ticks = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9a a3       	std	Y+34, r25	; 0x22
    2b4a:	89 a3       	std	Y+33, r24	; 0x21
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <main+0x538>
	else if (__tmp > 65535)
    2b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b50:	7c a1       	ldd	r23, Y+36	; 0x24
    2b52:	8d a1       	ldd	r24, Y+37	; 0x25
    2b54:	9e a1       	ldd	r25, Y+38	; 0x26
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <main+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	6f a1       	ldd	r22, Y+39	; 0x27
    2b68:	78 a5       	ldd	r23, Y+40	; 0x28
    2b6a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9a a3       	std	Y+34, r25	; 0x22
    2b8c:	89 a3       	std	Y+33, r24	; 0x21
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <main+0x51a>
    2b90:	88 ec       	ldi	r24, 0xC8	; 200
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	98 a3       	std	Y+32, r25	; 0x20
    2b96:	8f 8f       	std	Y+31, r24	; 0x1f
    2b98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b9a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <main+0x508>
    2ba0:	98 a3       	std	Y+32, r25	; 0x20
    2ba2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9a a3       	std	Y+34, r25	; 0x22
    2bac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <main+0x4fc>
    2bb6:	14 c0       	rjmp	.+40     	; 0x2be0 <main+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bba:	7c a1       	ldd	r23, Y+36	; 0x24
    2bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9a a3       	std	Y+34, r25	; 0x22
    2bca:	89 a3       	std	Y+33, r24	; 0x21
    2bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bce:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2bd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <main+0x544>
    2bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bde:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);
					LCD_WriteCommand(lcd_clr);							//Clearing LCD
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
    2be6:	2e c0       	rjmp	.+92     	; 0x2c44 <main+0x5b0>
				}
				else if(comparepassreturnedvalue==wrongpass) //if entered pass is wrong
    2be8:	fe 01       	movw	r30, r28
    2bea:	e9 5a       	subi	r30, 0xA9	; 169
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	41 f5       	brne	.+80     	; 0x2c44 <main+0x5b0>
				{
					LCD_WriteCommand(lcd_clr);							//Clearing LCD
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
					LCD_WriteStringOnCursor("Wrong pass,try again");	//asking user to enter pass again
    2bfa:	80 ec       	ldi	r24, 0xC0	; 192
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
					EnterPass(enteredpass);								//Taking entered Password from user
    2c02:	85 e3       	ldi	r24, 0x35	; 53
    2c04:	91 e0       	ldi	r25, 0x01	; 1
    2c06:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <EnterPass>
					comparepassreturnedvalue	=	u8ComparePass(settedpass,enteredpass,4);//Comparing Set with entered password
    2c0a:	81 e3       	ldi	r24, 0x31	; 49
    2c0c:	91 e0       	ldi	r25, 0x01	; 1
    2c0e:	25 e3       	ldi	r18, 0x35	; 53
    2c10:	31 e0       	ldi	r19, 0x01	; 1
    2c12:	b9 01       	movw	r22, r18
    2c14:	44 e0       	ldi	r20, 0x04	; 4
    2c16:	0e 94 6e 18 	call	0x30dc	; 0x30dc <u8ComparePass>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e9 5a       	subi	r30, 0xA9	; 169
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 83       	st	Z, r24
					tries++;	//increasing tries counter
    2c22:	80 91 3e 01 	lds	r24, 0x013E
    2c26:	8f 5f       	subi	r24, 0xFF	; 255
    2c28:	80 93 3e 01 	sts	0x013E, r24
					if(tries==2) //if the tries reached 3 times
    2c2c:	80 91 3e 01 	lds	r24, 0x013E
    2c30:	82 30       	cpi	r24, 0x02	; 2
    2c32:	41 f4       	brne	.+16     	; 0x2c44 <main+0x5b0>
					{
						LCD_WriteCommand(lcd_clr);							//Clearing LCD
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
						LCD_WriteStringOnCursor("Login Failed");			//Access failed
    2c3a:	85 ed       	ldi	r24, 0xD5	; 213
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
    2c42:	61 c1       	rjmp	.+706    	; 0x2f06 <main+0x872>
			LCD_WriteStringOnCursor("Enter Admin Pass");

			EnterPass(enteredpass);	//Taking entered Password from user
			u8 comparepassreturnedvalue=u8ComparePass(settedpass,enteredpass,4);//check entered pass with set password if they are equal

			while (login_status!=logged)
    2c44:	80 91 3f 01 	lds	r24, 0x013F
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <main+0x5ba>
    2c4c:	c5 ce       	rjmp	.-630    	; 0x29d8 <main+0x344>
    2c4e:	5b c1       	rjmp	.+694    	; 0x2f06 <main+0x872>
			}
		}

		while(login_status==logged)
		{
			LCD_WriteCommand(lcd_clr);							//Clearing LCD
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
			LCD_WriteStringOnCursor("1:Light 2:TV");			//Giving options to user
    2c56:	82 ee       	ldi	r24, 0xE2	; 226
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
			LCD_GoToXY(1,0);									//Move to second line
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_GoToXY>
			LCD_WriteStringOnCursor("3:TEMP ");			//Giving options to user
    2c66:	8f ee       	ldi	r24, 0xEF	; 239
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>

			GetPressedKey();									//Getting user Option
    2c6e:	0e 94 57 18 	call	0x30ae	; 0x30ae <GetPressedKey>
			if (Local_u8Key == LIGHTS)	//If user option is Lights
    2c72:	80 91 30 01 	lds	r24, 0x0130
    2c76:	81 30       	cpi	r24, 0x01	; 1
    2c78:	d1 f4       	brne	.+52     	; 0x2cae <main+0x61a>
			{
				u8 LED_State = DIO_GetPinValue(DIO_PORTB,DIO_PIN5);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	65 e0       	ldi	r22, 0x05	; 5
    2c7e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_GetPinValue>
    2c82:	fe 01       	movw	r30, r28
    2c84:	ea 5a       	subi	r30, 0xAA	; 170
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 83       	st	Z, r24
				if(LED_State==DIO_LOW)
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ea 5a       	subi	r30, 0xAA	; 170
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	88 23       	and	r24, r24
    2c94:	31 f4       	brne	.+12     	; 0x2ca2 <main+0x60e>
				{
					DIO_SetPinValue(DIO_PORTB,DIO_PIN5,DIO_HIGH);	//Send order to slave to take action
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	65 e0       	ldi	r22, 0x05	; 5
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    2ca0:	32 c1       	rjmp	.+612    	; 0x2f06 <main+0x872>
				}
				else
				{
					DIO_SetPinValue(DIO_PORTB,DIO_PIN5,DIO_LOW);	//Send order to slave to take action
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	65 e0       	ldi	r22, 0x05	; 5
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    2cac:	2c c1       	rjmp	.+600    	; 0x2f06 <main+0x872>
				}
			}
			else if (Local_u8Key == TV)//else If user option is TV
    2cae:	80 91 30 01 	lds	r24, 0x0130
    2cb2:	82 30       	cpi	r24, 0x02	; 2
    2cb4:	d1 f4       	brne	.+52     	; 0x2cea <main+0x656>
			{
				u8 TV_State = DIO_GetPinValue(DIO_PORTB,DIO_PIN6);
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	66 e0       	ldi	r22, 0x06	; 6
    2cba:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_GetPinValue>
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	eb 5a       	subi	r30, 0xAB	; 171
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 83       	st	Z, r24
				if(TV_State==DIO_LOW)
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	eb 5a       	subi	r30, 0xAB	; 171
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	88 23       	and	r24, r24
    2cd0:	31 f4       	brne	.+12     	; 0x2cde <main+0x64a>
				{
					DIO_SetPinValue(DIO_PORTB,DIO_PIN6,DIO_HIGH);	//Send order to slave to take action
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	66 e0       	ldi	r22, 0x06	; 6
    2cd6:	41 e0       	ldi	r20, 0x01	; 1
    2cd8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    2cdc:	14 c1       	rjmp	.+552    	; 0x2f06 <main+0x872>
				}
				else
				{
					DIO_SetPinValue(DIO_PORTB,DIO_PIN6,DIO_LOW);	//Send order to slave to take action
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	66 e0       	ldi	r22, 0x06	; 6
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    2ce8:	0e c1       	rjmp	.+540    	; 0x2f06 <main+0x872>
				}
			}
			else if (Local_u8Key == TEMP)//else if user option is TEMP
    2cea:	80 91 30 01 	lds	r24, 0x0130
    2cee:	83 30       	cpi	r24, 0x03	; 3
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <main+0x660>
    2cf2:	90 c0       	rjmp	.+288    	; 0x2e14 <main+0x780>
			{
				LCD_WriteCommand(lcd_clr);							//Clearing LCD
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
				Temp_Read = Temp_voidGetTemperature(ADC0);			//REad Temp from ADC Channel 0
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	0e 94 a8 18 	call	0x3150	; 0x3150 <Temp_voidGetTemperature>
    2d00:	90 93 41 01 	sts	0x0141, r25
    2d04:	80 93 40 01 	sts	0x0140, r24
				/*Displaying temp*/
				LCD_WriteStringOnCursor("Temp = ");
    2d08:	87 ef       	ldi	r24, 0xF7	; 247
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
				LCD_WriteInt(Temp_Read);
    2d10:	80 91 40 01 	lds	r24, 0x0140
    2d14:	90 91 41 01 	lds	r25, 0x0141
    2d18:	cc 01       	movw	r24, r24
    2d1a:	a0 e0       	ldi	r26, 0x00	; 0
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 c3 11 	call	0x2386	; 0x2386 <LCD_WriteInt>
				LCD_WriteStringOnCursor("C");
    2d26:	8f ef       	ldi	r24, 0xFF	; 255
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	aa e7       	ldi	r26, 0x7A	; 122
    2d34:	b4 e4       	ldi	r27, 0x44	; 68
    2d36:	89 8f       	std	Y+25, r24	; 0x19
    2d38:	9a 8f       	std	Y+26, r25	; 0x1a
    2d3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a ef       	ldi	r20, 0xFA	; 250
    2d4c:	54 e4       	ldi	r21, 0x44	; 68
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8d 8b       	std	Y+21, r24	; 0x15
    2d58:	9e 8b       	std	Y+22, r25	; 0x16
    2d5a:	af 8b       	std	Y+23, r26	; 0x17
    2d5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d60:	7e 89       	ldd	r23, Y+22	; 0x16
    2d62:	8f 89       	ldd	r24, Y+23	; 0x17
    2d64:	98 8d       	ldd	r25, Y+24	; 0x18
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	2c f4       	brge	.+10     	; 0x2d80 <main+0x6ec>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9c 8b       	std	Y+20, r25	; 0x14
    2d7c:	8b 8b       	std	Y+19, r24	; 0x13
    2d7e:	3f c0       	rjmp	.+126    	; 0x2dfe <main+0x76a>
	else if (__tmp > 65535)
    2d80:	6d 89       	ldd	r22, Y+21	; 0x15
    2d82:	7e 89       	ldd	r23, Y+22	; 0x16
    2d84:	8f 89       	ldd	r24, Y+23	; 0x17
    2d86:	98 8d       	ldd	r25, Y+24	; 0x18
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	4c f5       	brge	.+82     	; 0x2dea <main+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d98:	69 8d       	ldd	r22, Y+25	; 0x19
    2d9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9c 8b       	std	Y+20, r25	; 0x14
    2dbe:	8b 8b       	std	Y+19, r24	; 0x13
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <main+0x74c>
    2dc2:	88 ec       	ldi	r24, 0xC8	; 200
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9a 8b       	std	Y+18, r25	; 0x12
    2dc8:	89 8b       	std	Y+17, r24	; 0x11
    2dca:	89 89       	ldd	r24, Y+17	; 0x11
    2dcc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <main+0x73a>
    2dd2:	9a 8b       	std	Y+18, r25	; 0x12
    2dd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	9c 8b       	std	Y+20, r25	; 0x14
    2dde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de0:	8b 89       	ldd	r24, Y+19	; 0x13
    2de2:	9c 89       	ldd	r25, Y+20	; 0x14
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <main+0x72e>
    2de8:	8e c0       	rjmp	.+284    	; 0x2f06 <main+0x872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dea:	6d 89       	ldd	r22, Y+21	; 0x15
    2dec:	7e 89       	ldd	r23, Y+22	; 0x16
    2dee:	8f 89       	ldd	r24, Y+23	; 0x17
    2df0:	98 8d       	ldd	r25, Y+24	; 0x18
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9c 8b       	std	Y+20, r25	; 0x14
    2dfc:	8b 8b       	std	Y+19, r24	; 0x13
    2dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2e00:	9c 89       	ldd	r25, Y+20	; 0x14
    2e02:	98 8b       	std	Y+16, r25	; 0x10
    2e04:	8f 87       	std	Y+15, r24	; 0x0f
    2e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e08:	98 89       	ldd	r25, Y+16	; 0x10
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <main+0x776>
    2e0e:	98 8b       	std	Y+16, r25	; 0x10
    2e10:	8f 87       	std	Y+15, r24	; 0x0f
    2e12:	79 c0       	rjmp	.+242    	; 0x2f06 <main+0x872>
				_delay_ms(1000);
			}
			else // if wrong input
			{
				LCD_WriteCommand(lcd_clr);							//Clearing LCD
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_WriteCommand>
				LCD_WriteStringOnCursor("Wrong input");				//print error message
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	91 e0       	ldi	r25, 0x01	; 1
    2e1e:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	aa e7       	ldi	r26, 0x7A	; 122
    2e28:	b4 e4       	ldi	r27, 0x44	; 68
    2e2a:	8b 87       	std	Y+11, r24	; 0x0b
    2e2c:	9c 87       	std	Y+12, r25	; 0x0c
    2e2e:	ad 87       	std	Y+13, r26	; 0x0d
    2e30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	4a ef       	ldi	r20, 0xFA	; 250
    2e40:	54 e4       	ldi	r21, 0x44	; 68
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	8f 83       	std	Y+7, r24	; 0x07
    2e4c:	98 87       	std	Y+8, r25	; 0x08
    2e4e:	a9 87       	std	Y+9, r26	; 0x09
    2e50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e52:	6f 81       	ldd	r22, Y+7	; 0x07
    2e54:	78 85       	ldd	r23, Y+8	; 0x08
    2e56:	89 85       	ldd	r24, Y+9	; 0x09
    2e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e8       	ldi	r20, 0x80	; 128
    2e60:	5f e3       	ldi	r21, 0x3F	; 63
    2e62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e66:	88 23       	and	r24, r24
    2e68:	2c f4       	brge	.+10     	; 0x2e74 <main+0x7e0>
		__ticks = 1;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	9e 83       	std	Y+6, r25	; 0x06
    2e70:	8d 83       	std	Y+5, r24	; 0x05
    2e72:	3f c0       	rjmp	.+126    	; 0x2ef2 <main+0x85e>
	else if (__tmp > 65535)
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	3f ef       	ldi	r19, 0xFF	; 255
    2e80:	4f e7       	ldi	r20, 0x7F	; 127
    2e82:	57 e4       	ldi	r21, 0x47	; 71
    2e84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e88:	18 16       	cp	r1, r24
    2e8a:	4c f5       	brge	.+82     	; 0x2ede <main+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e2       	ldi	r20, 0x20	; 32
    2e9a:	51 e4       	ldi	r21, 0x41	; 65
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
    2eb4:	0f c0       	rjmp	.+30     	; 0x2ed4 <main+0x840>
    2eb6:	88 ec       	ldi	r24, 0xC8	; 200
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	9c 83       	std	Y+4, r25	; 0x04
    2ebc:	8b 83       	std	Y+3, r24	; 0x03
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <main+0x82e>
    2ec6:	9c 83       	std	Y+4, r25	; 0x04
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	9e 83       	std	Y+6, r25	; 0x06
    2ed2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	69 f7       	brne	.-38     	; 0x2eb6 <main+0x822>
    2edc:	14 c0       	rjmp	.+40     	; 0x2f06 <main+0x872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ede:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee0:	78 85       	ldd	r23, Y+8	; 0x08
    2ee2:	89 85       	ldd	r24, Y+9	; 0x09
    2ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
    2ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef6:	9a 83       	std	Y+2, r25	; 0x02
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <main+0x86a>
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
					}
				}
			}
		}

		while(login_status==logged)
    2f06:	80 91 3f 01 	lds	r24, 0x013F
    2f0a:	81 30       	cpi	r24, 0x01	; 1
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <main+0x87c>
    2f0e:	a0 ce       	rjmp	.-704    	; 0x2c50 <main+0x5bc>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);    //Lights Pin
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);     //TV Pin
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);     //Heater Pin


	while (tries!=2) /*Checking How many times password entered*/
    2f10:	80 91 3e 01 	lds	r24, 0x013E
    2f14:	82 30       	cpi	r24, 0x02	; 2
    2f16:	09 f0       	breq	.+2      	; 0x2f1a <main+0x886>
    2f18:	ec cb       	rjmp	.-2088   	; 0x26f2 <main+0x5e>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(1000);
			}
		}

	}
}
    2f1e:	c9 5a       	subi	r28, 0xA9	; 169
    2f20:	df 4f       	sbci	r29, 0xFF	; 255
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	08 95       	ret

00002f36 <EnterPass>:


/*************************Functions implementation**********************/

void EnterPass(u8 pass[PASS_SIZE])
{
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	62 97       	sbiw	r28, 0x12	; 18
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	9a 8b       	std	Y+18, r25	; 0x12
    2f4c:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_u8Key=0xFF;
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	88 8b       	std	Y+16, r24	; 0x10
	u8 pass_counter=0;//the counter of the characters of the password
    2f52:	1f 86       	std	Y+15, r1	; 0x0f
    2f54:	9f c0       	rjmp	.+318    	; 0x3094 <EnterPass+0x15e>
	while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
	{
		Local_u8Key=GetPressedKey();	//getting pressed key
    2f56:	0e 94 57 18 	call	0x30ae	; 0x30ae <GetPressedKey>
    2f5a:	88 8b       	std	Y+16, r24	; 0x10
		LCD_GoToXY(1,pass_counter);//displaying password on second line
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f60:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_GoToXY>
		pass[pass_counter]=Local_u8Key;//add the entered character to the pass array
    2f64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	89 89       	ldd	r24, Y+17	; 0x11
    2f6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f6e:	fc 01       	movw	r30, r24
    2f70:	e2 0f       	add	r30, r18
    2f72:	f3 1f       	adc	r31, r19
    2f74:	88 89       	ldd	r24, Y+16	; 0x10
    2f76:	80 83       	st	Z, r24
		LCD_WriteInt(pass[pass_counter]);//Display number
    2f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	89 89       	ldd	r24, Y+17	; 0x11
    2f80:	9a 89       	ldd	r25, Y+18	; 0x12
    2f82:	fc 01       	movw	r30, r24
    2f84:	e2 0f       	add	r30, r18
    2f86:	f3 1f       	adc	r31, r19
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	a0 e0       	ldi	r26, 0x00	; 0
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 c3 11 	call	0x2386	; 0x2386 <LCD_WriteInt>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a8 ec       	ldi	r26, 0xC8	; 200
    2fa0:	b2 e4       	ldi	r27, 0x42	; 66
    2fa2:	8b 87       	std	Y+11, r24	; 0x0b
    2fa4:	9c 87       	std	Y+12, r25	; 0x0c
    2fa6:	ad 87       	std	Y+13, r26	; 0x0d
    2fa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a ef       	ldi	r20, 0xFA	; 250
    2fb8:	54 e4       	ldi	r21, 0x44	; 68
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	8f 83       	std	Y+7, r24	; 0x07
    2fc4:	98 87       	std	Y+8, r25	; 0x08
    2fc6:	a9 87       	std	Y+9, r26	; 0x09
    2fc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	2c f4       	brge	.+10     	; 0x2fec <EnterPass+0xb6>
		__ticks = 1;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
    2fea:	3f c0       	rjmp	.+126    	; 0x306a <EnterPass+0x134>
	else if (__tmp > 65535)
    2fec:	6f 81       	ldd	r22, Y+7	; 0x07
    2fee:	78 85       	ldd	r23, Y+8	; 0x08
    2ff0:	89 85       	ldd	r24, Y+9	; 0x09
    2ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	4c f5       	brge	.+82     	; 0x3056 <EnterPass+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3004:	6b 85       	ldd	r22, Y+11	; 0x0b
    3006:	7c 85       	ldd	r23, Y+12	; 0x0c
    3008:	8d 85       	ldd	r24, Y+13	; 0x0d
    300a:	9e 85       	ldd	r25, Y+14	; 0x0e
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
    302c:	0f c0       	rjmp	.+30     	; 0x304c <EnterPass+0x116>
    302e:	88 ec       	ldi	r24, 0xC8	; 200
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9c 83       	std	Y+4, r25	; 0x04
    3034:	8b 83       	std	Y+3, r24	; 0x03
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <EnterPass+0x104>
    303e:	9c 83       	std	Y+4, r25	; 0x04
    3040:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	9e 81       	ldd	r25, Y+6	; 0x06
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	9e 83       	std	Y+6, r25	; 0x06
    304a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	69 f7       	brne	.-38     	; 0x302e <EnterPass+0xf8>
    3054:	14 c0       	rjmp	.+40     	; 0x307e <EnterPass+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9e 83       	std	Y+6, r25	; 0x06
    3068:	8d 83       	std	Y+5, r24	; 0x05
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	89 83       	std	Y+1, r24	; 0x01
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <EnterPass+0x140>
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_GoToXY(1,pass_counter);		//one Step Backward
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	6f 85       	ldd	r22, Y+15	; 0x0f
    3082:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_GoToXY>
		LCD_WriteStringOnCursor("*"); // to display (Password sign *)
    3086:	8d e0       	ldi	r24, 0x0D	; 13
    3088:	91 e0       	ldi	r25, 0x01	; 1
    308a:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_WriteStringOnCursor>
		pass_counter++;					//increasing counter
    308e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3090:	8f 5f       	subi	r24, 0xFF	; 255
    3092:	8f 87       	std	Y+15, r24	; 0x0f

void EnterPass(u8 pass[PASS_SIZE])
{
	u8 Local_u8Key=0xFF;
	u8 pass_counter=0;//the counter of the characters of the password
	while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
    3094:	8f 85       	ldd	r24, Y+15	; 0x0f
    3096:	84 30       	cpi	r24, 0x04	; 4
    3098:	08 f4       	brcc	.+2      	; 0x309c <EnterPass+0x166>
    309a:	5d cf       	rjmp	.-326    	; 0x2f56 <EnterPass+0x20>
		LCD_GoToXY(1,pass_counter);		//one Step Backward
		LCD_WriteStringOnCursor("*"); // to display (Password sign *)
		pass_counter++;					//increasing counter
	}
	//return pass[PASS_SIZE];
}
    309c:	62 96       	adiw	r28, 0x12	; 18
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <GetPressedKey>:



u8 GetPressedKey(void)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
	Local_u8Key = 0xff;//return the variable that holds the pressed key from keypad to its initial value
    30b6:	8f ef       	ldi	r24, 0xFF	; 255
    30b8:	80 93 30 01 	sts	0x0130, r24
    30bc:	06 c0       	rjmp	.+12     	; 0x30ca <GetPressedKey+0x1c>
	while (Local_u8Key == 0xff)//repeat till the user press any key
	{
		Check_Temp();	//
    30be:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <Check_Temp>
		Local_u8Key = KPD_u8GetPressedKey();
    30c2:	0e 94 95 12 	call	0x252a	; 0x252a <KPD_u8GetPressedKey>
    30c6:	80 93 30 01 	sts	0x0130, r24


u8 GetPressedKey(void)
{
	Local_u8Key = 0xff;//return the variable that holds the pressed key from keypad to its initial value
	while (Local_u8Key == 0xff)//repeat till the user press any key
    30ca:	80 91 30 01 	lds	r24, 0x0130
    30ce:	8f 3f       	cpi	r24, 0xFF	; 255
    30d0:	b1 f3       	breq	.-20     	; 0x30be <GetPressedKey+0x10>
	{
		Check_Temp();	//
		Local_u8Key = KPD_u8GetPressedKey();
	}
	return Local_u8Key;
    30d2:	80 91 30 01 	lds	r24, 0x0130
}
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <u8ComparePass>:

u8 u8ComparePass(const u8* pass1,const u8* pass2,const u8 size)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	27 97       	sbiw	r28, 0x07	; 7
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	9c 83       	std	Y+4, r25	; 0x04
    30f2:	8b 83       	std	Y+3, r24	; 0x03
    30f4:	7e 83       	std	Y+6, r23	; 0x06
    30f6:	6d 83       	std	Y+5, r22	; 0x05
    30f8:	4f 83       	std	Y+7, r20	; 0x07
	u8 pin_counter=0;//the offset of the character of the pin
    30fa:	1a 82       	std	Y+2, r1	; 0x02
	u8 ret_value = 0;
    30fc:	19 82       	std	Y+1, r1	; 0x01
    30fe:	1a c0       	rjmp	.+52     	; 0x3134 <u8ComparePass+0x58>
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (pass1[pin_counter]!=pass2[pin_counter])//if the two characters of the entered pin and the stored pin are not equal
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	fc 01       	movw	r30, r24
    310c:	e2 0f       	add	r30, r18
    310e:	f3 1f       	adc	r31, r19
    3110:	40 81       	ld	r20, Z
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	9e 81       	ldd	r25, Y+6	; 0x06
    311c:	fc 01       	movw	r30, r24
    311e:	e2 0f       	add	r30, r18
    3120:	f3 1f       	adc	r31, r19
    3122:	80 81       	ld	r24, Z
    3124:	48 17       	cp	r20, r24
    3126:	19 f0       	breq	.+6      	; 0x312e <u8ComparePass+0x52>
		{
			ret_value= 1;				//returns 1 that means the two PINs are not equal
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	89 83       	std	Y+1, r24	; 0x01
    312c:	07 c0       	rjmp	.+14     	; 0x313c <u8ComparePass+0x60>
			break;						//break the loop
		}
		pin_counter++;//increase the offset by one
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	8f 5f       	subi	r24, 0xFF	; 255
    3132:	8a 83       	std	Y+2, r24	; 0x02

u8 u8ComparePass(const u8* pass1,const u8* pass2,const u8 size)
{
	u8 pin_counter=0;//the offset of the character of the pin
	u8 ret_value = 0;
	while (pin_counter<size)//loop till the pin is fully entered
    3134:	9a 81       	ldd	r25, Y+2	; 0x02
    3136:	8f 81       	ldd	r24, Y+7	; 0x07
    3138:	98 17       	cp	r25, r24
    313a:	10 f3       	brcs	.-60     	; 0x3100 <u8ComparePass+0x24>
			ret_value= 1;				//returns 1 that means the two PINs are not equal
			break;						//break the loop
		}
		pin_counter++;//increase the offset by one
	}
	return ret_value;//returns 0 that means the two PINs are equal since all characters of the PINs are equal
    313c:	89 81       	ldd	r24, Y+1	; 0x01
}
    313e:	27 96       	adiw	r28, 0x07	; 7
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <Temp_voidGetTemperature>:



u16 Temp_voidGetTemperature(u8 TEMP_Channel)
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
    3158:	27 97       	sbiw	r28, 0x07	; 7
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	8f 83       	std	Y+7, r24	; 0x07

	u16 local_DigitalReading;
	u16 local_AnalogReading;
	u16 Temperature ;
	local_DigitalReading= ADC_u16GetSyncReading(TEMP_Channel);
    3166:	8f 81       	ldd	r24, Y+7	; 0x07
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 45 0c 	call	0x188a	; 0x188a <ADC_u16GetSyncReading>
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
	local_AnalogReading = ((u32) local_DigitalReading * 5000UL)/1024;
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	cc 01       	movw	r24, r24
    317a:	a0 e0       	ldi	r26, 0x00	; 0
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	28 e8       	ldi	r18, 0x88	; 136
    3180:	33 e1       	ldi	r19, 0x13	; 19
    3182:	40 e0       	ldi	r20, 0x00	; 0
    3184:	50 e0       	ldi	r21, 0x00	; 0
    3186:	bc 01       	movw	r22, r24
    3188:	cd 01       	movw	r24, r26
    318a:	0e 94 42 1b 	call	0x3684	; 0x3684 <__mulsi3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	07 2e       	mov	r0, r23
    3194:	7a e0       	ldi	r23, 0x0A	; 10
    3196:	b6 95       	lsr	r27
    3198:	a7 95       	ror	r26
    319a:	97 95       	ror	r25
    319c:	87 95       	ror	r24
    319e:	7a 95       	dec	r23
    31a0:	d1 f7       	brne	.-12     	; 0x3196 <Temp_voidGetTemperature+0x46>
    31a2:	70 2d       	mov	r23, r0
    31a4:	9c 83       	std	Y+4, r25	; 0x04
    31a6:	8b 83       	std	Y+3, r24	; 0x03
	Temperature = local_AnalogReading / 620 ;
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	9c 81       	ldd	r25, Y+4	; 0x04
    31ac:	2c e6       	ldi	r18, 0x6C	; 108
    31ae:	32 e0       	ldi	r19, 0x02	; 2
    31b0:	b9 01       	movw	r22, r18
    31b2:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__udivmodhi4>
    31b6:	cb 01       	movw	r24, r22
    31b8:	9a 83       	std	Y+2, r25	; 0x02
    31ba:	89 83       	std	Y+1, r24	; 0x01
	return Temperature ;
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
}
    31c0:	27 96       	adiw	r28, 0x07	; 7
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <Check_Temp>:



void Check_Temp(void)
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
	Temp_Read = Temp_voidGetTemperature(ADC0);
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	0e 94 a8 18 	call	0x3150	; 0x3150 <Temp_voidGetTemperature>
    31e0:	90 93 41 01 	sts	0x0141, r25
    31e4:	80 93 40 01 	sts	0x0140, r24
	if(Temp_Read>=0	&& Temp_Read<=15)
    31e8:	80 91 40 01 	lds	r24, 0x0140
    31ec:	90 91 41 01 	lds	r25, 0x0141
    31f0:	80 31       	cpi	r24, 0x10	; 16
    31f2:	91 05       	cpc	r25, r1
    31f4:	48 f4       	brcc	.+18     	; 0x3208 <Check_Temp+0x36>
	{
		TIMER0_SetDuty(0);//Fan off
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	0e 94 87 06 	call	0xd0e	; 0xd0e <TIMER0_SetDuty>
		DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_HIGH);	//Heater on
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	67 e0       	ldi	r22, 0x07	; 7
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    3206:	26 c0       	rjmp	.+76     	; 0x3254 <Check_Temp+0x82>
	}
	else if((Temp_Read>15 && Temp_Read<=25))
    3208:	80 91 40 01 	lds	r24, 0x0140
    320c:	90 91 41 01 	lds	r25, 0x0141
    3210:	80 31       	cpi	r24, 0x10	; 16
    3212:	91 05       	cpc	r25, r1
    3214:	80 f0       	brcs	.+32     	; 0x3236 <Check_Temp+0x64>
    3216:	80 91 40 01 	lds	r24, 0x0140
    321a:	90 91 41 01 	lds	r25, 0x0141
    321e:	8a 31       	cpi	r24, 0x1A	; 26
    3220:	91 05       	cpc	r25, r1
    3222:	48 f4       	brcc	.+18     	; 0x3236 <Check_Temp+0x64>
	{
		TIMER0_SetDuty(0); //fan off
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	0e 94 87 06 	call	0xd0e	; 0xd0e <TIMER0_SetDuty>
		DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_LOW);	//Heater off
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	67 e0       	ldi	r22, 0x07	; 7
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    3234:	0f c0       	rjmp	.+30     	; 0x3254 <Check_Temp+0x82>
	}
	else
	{
		TIMER0_SetDuty(Temp_Read *4); //Send Duty cycle (Changing Speed According to Temp read)
    3236:	80 91 40 01 	lds	r24, 0x0140
    323a:	90 91 41 01 	lds	r25, 0x0141
    323e:	88 0f       	add	r24, r24
    3240:	99 1f       	adc	r25, r25
    3242:	88 0f       	add	r24, r24
    3244:	99 1f       	adc	r25, r25
    3246:	0e 94 87 06 	call	0xd0e	; 0xd0e <TIMER0_SetDuty>
		DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_LOW);
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	67 e0       	ldi	r22, 0x07	; 7
    324e:	40 e0       	ldi	r20, 0x00	; 0
    3250:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
	}
}
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <Servo_VoidRotate90Deg>:

void Servo_VoidRotate90Deg(void)
{
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	ee 97       	sbiw	r28, 0x3e	; 62
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(DIO_PORTA,DIO_PIN1,DIO_HIGH);
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	61 e0       	ldi	r22, 0x01	; 1
    3272:	41 e0       	ldi	r20, 0x01	; 1
    3274:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	90 e4       	ldi	r25, 0x40	; 64
    327c:	ac e9       	ldi	r26, 0x9C	; 156
    327e:	b5 e4       	ldi	r27, 0x45	; 69
    3280:	8b af       	std	Y+59, r24	; 0x3b
    3282:	9c af       	std	Y+60, r25	; 0x3c
    3284:	ad af       	std	Y+61, r26	; 0x3d
    3286:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3288:	6b ad       	ldd	r22, Y+59	; 0x3b
    328a:	7c ad       	ldd	r23, Y+60	; 0x3c
    328c:	8d ad       	ldd	r24, Y+61	; 0x3d
    328e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3290:	2b ea       	ldi	r18, 0xAB	; 171
    3292:	3a ea       	ldi	r19, 0xAA	; 170
    3294:	4a e2       	ldi	r20, 0x2A	; 42
    3296:	50 e4       	ldi	r21, 0x40	; 64
    3298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329c:	dc 01       	movw	r26, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	8f ab       	std	Y+55, r24	; 0x37
    32a2:	98 af       	std	Y+56, r25	; 0x38
    32a4:	a9 af       	std	Y+57, r26	; 0x39
    32a6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    32a8:	6f a9       	ldd	r22, Y+55	; 0x37
    32aa:	78 ad       	ldd	r23, Y+56	; 0x38
    32ac:	89 ad       	ldd	r24, Y+57	; 0x39
    32ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e8       	ldi	r20, 0x80	; 128
    32b6:	5f e3       	ldi	r21, 0x3F	; 63
    32b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32bc:	88 23       	and	r24, r24
    32be:	1c f4       	brge	.+6      	; 0x32c6 <Servo_VoidRotate90Deg+0x6c>
		__ticks = 1;
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	8e ab       	std	Y+54, r24	; 0x36
    32c4:	91 c0       	rjmp	.+290    	; 0x33e8 <Servo_VoidRotate90Deg+0x18e>
	else if (__tmp > 255)
    32c6:	6f a9       	ldd	r22, Y+55	; 0x37
    32c8:	78 ad       	ldd	r23, Y+56	; 0x38
    32ca:	89 ad       	ldd	r24, Y+57	; 0x39
    32cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4f e7       	ldi	r20, 0x7F	; 127
    32d4:	53 e4       	ldi	r21, 0x43	; 67
    32d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32da:	18 16       	cp	r1, r24
    32dc:	0c f0       	brlt	.+2      	; 0x32e0 <Servo_VoidRotate90Deg+0x86>
    32de:	7b c0       	rjmp	.+246    	; 0x33d6 <Servo_VoidRotate90Deg+0x17c>
	{
		_delay_ms(__us / 1000.0);
    32e0:	6b ad       	ldd	r22, Y+59	; 0x3b
    32e2:	7c ad       	ldd	r23, Y+60	; 0x3c
    32e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    32e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	4a e7       	ldi	r20, 0x7A	; 122
    32ee:	54 e4       	ldi	r21, 0x44	; 68
    32f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	8a ab       	std	Y+50, r24	; 0x32
    32fa:	9b ab       	std	Y+51, r25	; 0x33
    32fc:	ac ab       	std	Y+52, r26	; 0x34
    32fe:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3300:	6a a9       	ldd	r22, Y+50	; 0x32
    3302:	7b a9       	ldd	r23, Y+51	; 0x33
    3304:	8c a9       	ldd	r24, Y+52	; 0x34
    3306:	9d a9       	ldd	r25, Y+53	; 0x35
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	4a ef       	ldi	r20, 0xFA	; 250
    330e:	54 e4       	ldi	r21, 0x44	; 68
    3310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	8e a7       	std	Y+46, r24	; 0x2e
    331a:	9f a7       	std	Y+47, r25	; 0x2f
    331c:	a8 ab       	std	Y+48, r26	; 0x30
    331e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3320:	6e a5       	ldd	r22, Y+46	; 0x2e
    3322:	7f a5       	ldd	r23, Y+47	; 0x2f
    3324:	88 a9       	ldd	r24, Y+48	; 0x30
    3326:	99 a9       	ldd	r25, Y+49	; 0x31
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e8       	ldi	r20, 0x80	; 128
    332e:	5f e3       	ldi	r21, 0x3F	; 63
    3330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3334:	88 23       	and	r24, r24
    3336:	2c f4       	brge	.+10     	; 0x3342 <Servo_VoidRotate90Deg+0xe8>
		__ticks = 1;
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9d a7       	std	Y+45, r25	; 0x2d
    333e:	8c a7       	std	Y+44, r24	; 0x2c
    3340:	3f c0       	rjmp	.+126    	; 0x33c0 <Servo_VoidRotate90Deg+0x166>
	else if (__tmp > 65535)
    3342:	6e a5       	ldd	r22, Y+46	; 0x2e
    3344:	7f a5       	ldd	r23, Y+47	; 0x2f
    3346:	88 a9       	ldd	r24, Y+48	; 0x30
    3348:	99 a9       	ldd	r25, Y+49	; 0x31
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3356:	18 16       	cp	r1, r24
    3358:	4c f5       	brge	.+82     	; 0x33ac <Servo_VoidRotate90Deg+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335a:	6a a9       	ldd	r22, Y+50	; 0x32
    335c:	7b a9       	ldd	r23, Y+51	; 0x33
    335e:	8c a9       	ldd	r24, Y+52	; 0x34
    3360:	9d a9       	ldd	r25, Y+53	; 0x35
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e2       	ldi	r20, 0x20	; 32
    3368:	51 e4       	ldi	r21, 0x41	; 65
    336a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	bc 01       	movw	r22, r24
    3374:	cd 01       	movw	r24, r26
    3376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	9d a7       	std	Y+45, r25	; 0x2d
    3380:	8c a7       	std	Y+44, r24	; 0x2c
    3382:	0f c0       	rjmp	.+30     	; 0x33a2 <Servo_VoidRotate90Deg+0x148>
    3384:	88 ec       	ldi	r24, 0xC8	; 200
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9b a7       	std	Y+43, r25	; 0x2b
    338a:	8a a7       	std	Y+42, r24	; 0x2a
    338c:	8a a5       	ldd	r24, Y+42	; 0x2a
    338e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <Servo_VoidRotate90Deg+0x136>
    3394:	9b a7       	std	Y+43, r25	; 0x2b
    3396:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3398:	8c a5       	ldd	r24, Y+44	; 0x2c
    339a:	9d a5       	ldd	r25, Y+45	; 0x2d
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	9d a7       	std	Y+45, r25	; 0x2d
    33a0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    33a4:	9d a5       	ldd	r25, Y+45	; 0x2d
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	69 f7       	brne	.-38     	; 0x3384 <Servo_VoidRotate90Deg+0x12a>
    33aa:	24 c0       	rjmp	.+72     	; 0x33f4 <Servo_VoidRotate90Deg+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ac:	6e a5       	ldd	r22, Y+46	; 0x2e
    33ae:	7f a5       	ldd	r23, Y+47	; 0x2f
    33b0:	88 a9       	ldd	r24, Y+48	; 0x30
    33b2:	99 a9       	ldd	r25, Y+49	; 0x31
    33b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9d a7       	std	Y+45, r25	; 0x2d
    33be:	8c a7       	std	Y+44, r24	; 0x2c
    33c0:	8c a5       	ldd	r24, Y+44	; 0x2c
    33c2:	9d a5       	ldd	r25, Y+45	; 0x2d
    33c4:	99 a7       	std	Y+41, r25	; 0x29
    33c6:	88 a7       	std	Y+40, r24	; 0x28
    33c8:	88 a5       	ldd	r24, Y+40	; 0x28
    33ca:	99 a5       	ldd	r25, Y+41	; 0x29
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <Servo_VoidRotate90Deg+0x172>
    33d0:	99 a7       	std	Y+41, r25	; 0x29
    33d2:	88 a7       	std	Y+40, r24	; 0x28
    33d4:	0f c0       	rjmp	.+30     	; 0x33f4 <Servo_VoidRotate90Deg+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33d6:	6f a9       	ldd	r22, Y+55	; 0x37
    33d8:	78 ad       	ldd	r23, Y+56	; 0x38
    33da:	89 ad       	ldd	r24, Y+57	; 0x39
    33dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    33de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	8e ab       	std	Y+54, r24	; 0x36
    33e8:	8e a9       	ldd	r24, Y+54	; 0x36
    33ea:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33ec:	8f a1       	ldd	r24, Y+39	; 0x27
    33ee:	8a 95       	dec	r24
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <Servo_VoidRotate90Deg+0x194>
    33f2:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(5000);
	DIO_SetPinValue(DIO_PORTA,DIO_PIN1,DIO_LOW);
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	61 e0       	ldi	r22, 0x01	; 1
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	aa e7       	ldi	r26, 0x7A	; 122
    3404:	b4 e4       	ldi	r27, 0x44	; 68
    3406:	8b a3       	std	Y+35, r24	; 0x23
    3408:	9c a3       	std	Y+36, r25	; 0x24
    340a:	ad a3       	std	Y+37, r26	; 0x25
    340c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340e:	6b a1       	ldd	r22, Y+35	; 0x23
    3410:	7c a1       	ldd	r23, Y+36	; 0x24
    3412:	8d a1       	ldd	r24, Y+37	; 0x25
    3414:	9e a1       	ldd	r25, Y+38	; 0x26
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	4a ef       	ldi	r20, 0xFA	; 250
    341c:	54 e4       	ldi	r21, 0x44	; 68
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	8f 8f       	std	Y+31, r24	; 0x1f
    3428:	98 a3       	std	Y+32, r25	; 0x20
    342a:	a9 a3       	std	Y+33, r26	; 0x21
    342c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    342e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3430:	78 a1       	ldd	r23, Y+32	; 0x20
    3432:	89 a1       	ldd	r24, Y+33	; 0x21
    3434:	9a a1       	ldd	r25, Y+34	; 0x22
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e8       	ldi	r20, 0x80	; 128
    343c:	5f e3       	ldi	r21, 0x3F	; 63
    343e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3442:	88 23       	and	r24, r24
    3444:	2c f4       	brge	.+10     	; 0x3450 <Servo_VoidRotate90Deg+0x1f6>
		__ticks = 1;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	9e 8f       	std	Y+30, r25	; 0x1e
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
    344e:	3f c0       	rjmp	.+126    	; 0x34ce <Servo_VoidRotate90Deg+0x274>
	else if (__tmp > 65535)
    3450:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3452:	78 a1       	ldd	r23, Y+32	; 0x20
    3454:	89 a1       	ldd	r24, Y+33	; 0x21
    3456:	9a a1       	ldd	r25, Y+34	; 0x22
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	3f ef       	ldi	r19, 0xFF	; 255
    345c:	4f e7       	ldi	r20, 0x7F	; 127
    345e:	57 e4       	ldi	r21, 0x47	; 71
    3460:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3464:	18 16       	cp	r1, r24
    3466:	4c f5       	brge	.+82     	; 0x34ba <Servo_VoidRotate90Deg+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3468:	6b a1       	ldd	r22, Y+35	; 0x23
    346a:	7c a1       	ldd	r23, Y+36	; 0x24
    346c:	8d a1       	ldd	r24, Y+37	; 0x25
    346e:	9e a1       	ldd	r25, Y+38	; 0x26
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e2       	ldi	r20, 0x20	; 32
    3476:	51 e4       	ldi	r21, 0x41	; 65
    3478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	bc 01       	movw	r22, r24
    3482:	cd 01       	movw	r24, r26
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9e 8f       	std	Y+30, r25	; 0x1e
    348e:	8d 8f       	std	Y+29, r24	; 0x1d
    3490:	0f c0       	rjmp	.+30     	; 0x34b0 <Servo_VoidRotate90Deg+0x256>
    3492:	88 ec       	ldi	r24, 0xC8	; 200
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9c 8f       	std	Y+28, r25	; 0x1c
    3498:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    349a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    349c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <Servo_VoidRotate90Deg+0x244>
    34a2:	9c 8f       	std	Y+28, r25	; 0x1c
    34a4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	9e 8f       	std	Y+30, r25	; 0x1e
    34ae:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	69 f7       	brne	.-38     	; 0x3492 <Servo_VoidRotate90Deg+0x238>
    34b8:	14 c0       	rjmp	.+40     	; 0x34e2 <Servo_VoidRotate90Deg+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    34bc:	78 a1       	ldd	r23, Y+32	; 0x20
    34be:	89 a1       	ldd	r24, Y+33	; 0x21
    34c0:	9a a1       	ldd	r25, Y+34	; 0x22
    34c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	9e 8f       	std	Y+30, r25	; 0x1e
    34cc:	8d 8f       	std	Y+29, r24	; 0x1d
    34ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34d2:	9a 8f       	std	Y+26, r25	; 0x1a
    34d4:	89 8f       	std	Y+25, r24	; 0x19
    34d6:	89 8d       	ldd	r24, Y+25	; 0x19
    34d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <Servo_VoidRotate90Deg+0x280>
    34de:	9a 8f       	std	Y+26, r25	; 0x1a
    34e0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1000);


	DIO_SetPinValue(DIO_PORTA,DIO_PIN1,DIO_HIGH);
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	61 e0       	ldi	r22, 0x01	; 1
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e8       	ldi	r25, 0x80	; 128
    34f0:	ab eb       	ldi	r26, 0xBB	; 187
    34f2:	b4 e4       	ldi	r27, 0x44	; 68
    34f4:	8d 8b       	std	Y+21, r24	; 0x15
    34f6:	9e 8b       	std	Y+22, r25	; 0x16
    34f8:	af 8b       	std	Y+23, r26	; 0x17
    34fa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34fc:	6d 89       	ldd	r22, Y+21	; 0x15
    34fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3500:	8f 89       	ldd	r24, Y+23	; 0x17
    3502:	98 8d       	ldd	r25, Y+24	; 0x18
    3504:	2b ea       	ldi	r18, 0xAB	; 171
    3506:	3a ea       	ldi	r19, 0xAA	; 170
    3508:	4a e2       	ldi	r20, 0x2A	; 42
    350a:	50 e4       	ldi	r21, 0x40	; 64
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	89 8b       	std	Y+17, r24	; 0x11
    3516:	9a 8b       	std	Y+18, r25	; 0x12
    3518:	ab 8b       	std	Y+19, r26	; 0x13
    351a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    351c:	69 89       	ldd	r22, Y+17	; 0x11
    351e:	7a 89       	ldd	r23, Y+18	; 0x12
    3520:	8b 89       	ldd	r24, Y+19	; 0x13
    3522:	9c 89       	ldd	r25, Y+20	; 0x14
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	1c f4       	brge	.+6      	; 0x353a <Servo_VoidRotate90Deg+0x2e0>
		__ticks = 1;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	88 8b       	std	Y+16, r24	; 0x10
    3538:	91 c0       	rjmp	.+290    	; 0x365c <Servo_VoidRotate90Deg+0x402>
	else if (__tmp > 255)
    353a:	69 89       	ldd	r22, Y+17	; 0x11
    353c:	7a 89       	ldd	r23, Y+18	; 0x12
    353e:	8b 89       	ldd	r24, Y+19	; 0x13
    3540:	9c 89       	ldd	r25, Y+20	; 0x14
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	4f e7       	ldi	r20, 0x7F	; 127
    3548:	53 e4       	ldi	r21, 0x43	; 67
    354a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    354e:	18 16       	cp	r1, r24
    3550:	0c f0       	brlt	.+2      	; 0x3554 <Servo_VoidRotate90Deg+0x2fa>
    3552:	7b c0       	rjmp	.+246    	; 0x364a <Servo_VoidRotate90Deg+0x3f0>
	{
		_delay_ms(__us / 1000.0);
    3554:	6d 89       	ldd	r22, Y+21	; 0x15
    3556:	7e 89       	ldd	r23, Y+22	; 0x16
    3558:	8f 89       	ldd	r24, Y+23	; 0x17
    355a:	98 8d       	ldd	r25, Y+24	; 0x18
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	4a e7       	ldi	r20, 0x7A	; 122
    3562:	54 e4       	ldi	r21, 0x44	; 68
    3564:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	8c 87       	std	Y+12, r24	; 0x0c
    356e:	9d 87       	std	Y+13, r25	; 0x0d
    3570:	ae 87       	std	Y+14, r26	; 0x0e
    3572:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3574:	6c 85       	ldd	r22, Y+12	; 0x0c
    3576:	7d 85       	ldd	r23, Y+13	; 0x0d
    3578:	8e 85       	ldd	r24, Y+14	; 0x0e
    357a:	9f 85       	ldd	r25, Y+15	; 0x0f
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	4a ef       	ldi	r20, 0xFA	; 250
    3582:	54 e4       	ldi	r21, 0x44	; 68
    3584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	88 87       	std	Y+8, r24	; 0x08
    358e:	99 87       	std	Y+9, r25	; 0x09
    3590:	aa 87       	std	Y+10, r26	; 0x0a
    3592:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3594:	68 85       	ldd	r22, Y+8	; 0x08
    3596:	79 85       	ldd	r23, Y+9	; 0x09
    3598:	8a 85       	ldd	r24, Y+10	; 0x0a
    359a:	9b 85       	ldd	r25, Y+11	; 0x0b
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e8       	ldi	r20, 0x80	; 128
    35a2:	5f e3       	ldi	r21, 0x3F	; 63
    35a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35a8:	88 23       	and	r24, r24
    35aa:	2c f4       	brge	.+10     	; 0x35b6 <Servo_VoidRotate90Deg+0x35c>
		__ticks = 1;
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9f 83       	std	Y+7, r25	; 0x07
    35b2:	8e 83       	std	Y+6, r24	; 0x06
    35b4:	3f c0       	rjmp	.+126    	; 0x3634 <Servo_VoidRotate90Deg+0x3da>
	else if (__tmp > 65535)
    35b6:	68 85       	ldd	r22, Y+8	; 0x08
    35b8:	79 85       	ldd	r23, Y+9	; 0x09
    35ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    35bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	3f ef       	ldi	r19, 0xFF	; 255
    35c2:	4f e7       	ldi	r20, 0x7F	; 127
    35c4:	57 e4       	ldi	r21, 0x47	; 71
    35c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ca:	18 16       	cp	r1, r24
    35cc:	4c f5       	brge	.+82     	; 0x3620 <Servo_VoidRotate90Deg+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    35d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    35d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    35d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	40 e2       	ldi	r20, 0x20	; 32
    35dc:	51 e4       	ldi	r21, 0x41	; 65
    35de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	bc 01       	movw	r22, r24
    35e8:	cd 01       	movw	r24, r26
    35ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	9f 83       	std	Y+7, r25	; 0x07
    35f4:	8e 83       	std	Y+6, r24	; 0x06
    35f6:	0f c0       	rjmp	.+30     	; 0x3616 <Servo_VoidRotate90Deg+0x3bc>
    35f8:	88 ec       	ldi	r24, 0xC8	; 200
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	9d 83       	std	Y+5, r25	; 0x05
    35fe:	8c 83       	std	Y+4, r24	; 0x04
    3600:	8c 81       	ldd	r24, Y+4	; 0x04
    3602:	9d 81       	ldd	r25, Y+5	; 0x05
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	f1 f7       	brne	.-4      	; 0x3604 <Servo_VoidRotate90Deg+0x3aa>
    3608:	9d 83       	std	Y+5, r25	; 0x05
    360a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360c:	8e 81       	ldd	r24, Y+6	; 0x06
    360e:	9f 81       	ldd	r25, Y+7	; 0x07
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	9f 83       	std	Y+7, r25	; 0x07
    3614:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3616:	8e 81       	ldd	r24, Y+6	; 0x06
    3618:	9f 81       	ldd	r25, Y+7	; 0x07
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	69 f7       	brne	.-38     	; 0x35f8 <Servo_VoidRotate90Deg+0x39e>
    361e:	24 c0       	rjmp	.+72     	; 0x3668 <Servo_VoidRotate90Deg+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3620:	68 85       	ldd	r22, Y+8	; 0x08
    3622:	79 85       	ldd	r23, Y+9	; 0x09
    3624:	8a 85       	ldd	r24, Y+10	; 0x0a
    3626:	9b 85       	ldd	r25, Y+11	; 0x0b
    3628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	9f 83       	std	Y+7, r25	; 0x07
    3632:	8e 83       	std	Y+6, r24	; 0x06
    3634:	8e 81       	ldd	r24, Y+6	; 0x06
    3636:	9f 81       	ldd	r25, Y+7	; 0x07
    3638:	9b 83       	std	Y+3, r25	; 0x03
    363a:	8a 83       	std	Y+2, r24	; 0x02
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	9b 81       	ldd	r25, Y+3	; 0x03
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	f1 f7       	brne	.-4      	; 0x3640 <Servo_VoidRotate90Deg+0x3e6>
    3644:	9b 83       	std	Y+3, r25	; 0x03
    3646:	8a 83       	std	Y+2, r24	; 0x02
    3648:	0f c0       	rjmp	.+30     	; 0x3668 <Servo_VoidRotate90Deg+0x40e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    364a:	69 89       	ldd	r22, Y+17	; 0x11
    364c:	7a 89       	ldd	r23, Y+18	; 0x12
    364e:	8b 89       	ldd	r24, Y+19	; 0x13
    3650:	9c 89       	ldd	r25, Y+20	; 0x14
    3652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	88 8b       	std	Y+16, r24	; 0x10
    365c:	88 89       	ldd	r24, Y+16	; 0x10
    365e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	8a 95       	dec	r24
    3664:	f1 f7       	brne	.-4      	; 0x3662 <Servo_VoidRotate90Deg+0x408>
    3666:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1500);
	DIO_SetPinValue(DIO_PORTA,DIO_PIN1,DIO_LOW);
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	61 e0       	ldi	r22, 0x01	; 1
    366c:	40 e0       	ldi	r20, 0x00	; 0
    366e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>

}
    3672:	ee 96       	adiw	r28, 0x3e	; 62
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	cf 91       	pop	r28
    3680:	df 91       	pop	r29
    3682:	08 95       	ret

00003684 <__mulsi3>:
    3684:	62 9f       	mul	r22, r18
    3686:	d0 01       	movw	r26, r0
    3688:	73 9f       	mul	r23, r19
    368a:	f0 01       	movw	r30, r0
    368c:	82 9f       	mul	r24, r18
    368e:	e0 0d       	add	r30, r0
    3690:	f1 1d       	adc	r31, r1
    3692:	64 9f       	mul	r22, r20
    3694:	e0 0d       	add	r30, r0
    3696:	f1 1d       	adc	r31, r1
    3698:	92 9f       	mul	r25, r18
    369a:	f0 0d       	add	r31, r0
    369c:	83 9f       	mul	r24, r19
    369e:	f0 0d       	add	r31, r0
    36a0:	74 9f       	mul	r23, r20
    36a2:	f0 0d       	add	r31, r0
    36a4:	65 9f       	mul	r22, r21
    36a6:	f0 0d       	add	r31, r0
    36a8:	99 27       	eor	r25, r25
    36aa:	72 9f       	mul	r23, r18
    36ac:	b0 0d       	add	r27, r0
    36ae:	e1 1d       	adc	r30, r1
    36b0:	f9 1f       	adc	r31, r25
    36b2:	63 9f       	mul	r22, r19
    36b4:	b0 0d       	add	r27, r0
    36b6:	e1 1d       	adc	r30, r1
    36b8:	f9 1f       	adc	r31, r25
    36ba:	bd 01       	movw	r22, r26
    36bc:	cf 01       	movw	r24, r30
    36be:	11 24       	eor	r1, r1
    36c0:	08 95       	ret

000036c2 <__udivmodhi4>:
    36c2:	aa 1b       	sub	r26, r26
    36c4:	bb 1b       	sub	r27, r27
    36c6:	51 e1       	ldi	r21, 0x11	; 17
    36c8:	07 c0       	rjmp	.+14     	; 0x36d8 <__udivmodhi4_ep>

000036ca <__udivmodhi4_loop>:
    36ca:	aa 1f       	adc	r26, r26
    36cc:	bb 1f       	adc	r27, r27
    36ce:	a6 17       	cp	r26, r22
    36d0:	b7 07       	cpc	r27, r23
    36d2:	10 f0       	brcs	.+4      	; 0x36d8 <__udivmodhi4_ep>
    36d4:	a6 1b       	sub	r26, r22
    36d6:	b7 0b       	sbc	r27, r23

000036d8 <__udivmodhi4_ep>:
    36d8:	88 1f       	adc	r24, r24
    36da:	99 1f       	adc	r25, r25
    36dc:	5a 95       	dec	r21
    36de:	a9 f7       	brne	.-22     	; 0x36ca <__udivmodhi4_loop>
    36e0:	80 95       	com	r24
    36e2:	90 95       	com	r25
    36e4:	bc 01       	movw	r22, r24
    36e6:	cd 01       	movw	r24, r26
    36e8:	08 95       	ret

000036ea <__udivmodsi4>:
    36ea:	a1 e2       	ldi	r26, 0x21	; 33
    36ec:	1a 2e       	mov	r1, r26
    36ee:	aa 1b       	sub	r26, r26
    36f0:	bb 1b       	sub	r27, r27
    36f2:	fd 01       	movw	r30, r26
    36f4:	0d c0       	rjmp	.+26     	; 0x3710 <__udivmodsi4_ep>

000036f6 <__udivmodsi4_loop>:
    36f6:	aa 1f       	adc	r26, r26
    36f8:	bb 1f       	adc	r27, r27
    36fa:	ee 1f       	adc	r30, r30
    36fc:	ff 1f       	adc	r31, r31
    36fe:	a2 17       	cp	r26, r18
    3700:	b3 07       	cpc	r27, r19
    3702:	e4 07       	cpc	r30, r20
    3704:	f5 07       	cpc	r31, r21
    3706:	20 f0       	brcs	.+8      	; 0x3710 <__udivmodsi4_ep>
    3708:	a2 1b       	sub	r26, r18
    370a:	b3 0b       	sbc	r27, r19
    370c:	e4 0b       	sbc	r30, r20
    370e:	f5 0b       	sbc	r31, r21

00003710 <__udivmodsi4_ep>:
    3710:	66 1f       	adc	r22, r22
    3712:	77 1f       	adc	r23, r23
    3714:	88 1f       	adc	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	1a 94       	dec	r1
    371a:	69 f7       	brne	.-38     	; 0x36f6 <__udivmodsi4_loop>
    371c:	60 95       	com	r22
    371e:	70 95       	com	r23
    3720:	80 95       	com	r24
    3722:	90 95       	com	r25
    3724:	9b 01       	movw	r18, r22
    3726:	ac 01       	movw	r20, r24
    3728:	bd 01       	movw	r22, r26
    372a:	cf 01       	movw	r24, r30
    372c:	08 95       	ret

0000372e <__prologue_saves__>:
    372e:	2f 92       	push	r2
    3730:	3f 92       	push	r3
    3732:	4f 92       	push	r4
    3734:	5f 92       	push	r5
    3736:	6f 92       	push	r6
    3738:	7f 92       	push	r7
    373a:	8f 92       	push	r8
    373c:	9f 92       	push	r9
    373e:	af 92       	push	r10
    3740:	bf 92       	push	r11
    3742:	cf 92       	push	r12
    3744:	df 92       	push	r13
    3746:	ef 92       	push	r14
    3748:	ff 92       	push	r15
    374a:	0f 93       	push	r16
    374c:	1f 93       	push	r17
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	ca 1b       	sub	r28, r26
    3758:	db 0b       	sbc	r29, r27
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	09 94       	ijmp

00003766 <__epilogue_restores__>:
    3766:	2a 88       	ldd	r2, Y+18	; 0x12
    3768:	39 88       	ldd	r3, Y+17	; 0x11
    376a:	48 88       	ldd	r4, Y+16	; 0x10
    376c:	5f 84       	ldd	r5, Y+15	; 0x0f
    376e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3770:	7d 84       	ldd	r7, Y+13	; 0x0d
    3772:	8c 84       	ldd	r8, Y+12	; 0x0c
    3774:	9b 84       	ldd	r9, Y+11	; 0x0b
    3776:	aa 84       	ldd	r10, Y+10	; 0x0a
    3778:	b9 84       	ldd	r11, Y+9	; 0x09
    377a:	c8 84       	ldd	r12, Y+8	; 0x08
    377c:	df 80       	ldd	r13, Y+7	; 0x07
    377e:	ee 80       	ldd	r14, Y+6	; 0x06
    3780:	fd 80       	ldd	r15, Y+5	; 0x05
    3782:	0c 81       	ldd	r16, Y+4	; 0x04
    3784:	1b 81       	ldd	r17, Y+3	; 0x03
    3786:	aa 81       	ldd	r26, Y+2	; 0x02
    3788:	b9 81       	ldd	r27, Y+1	; 0x01
    378a:	ce 0f       	add	r28, r30
    378c:	d1 1d       	adc	r29, r1
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	ed 01       	movw	r28, r26
    379a:	08 95       	ret

0000379c <_exit>:
    379c:	f8 94       	cli

0000379e <__stop_program>:
    379e:	ff cf       	rjmp	.-2      	; 0x379e <__stop_program>
